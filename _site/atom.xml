<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Steve's Blog</title>
 <link href="http://blog.steveklabnik.com/atom.xml" rel="self"/>
 <link href="http://steveklabnik.com/"/>
 <updated>2011-09-04T15:51:07-04:00</updated>
 <id>http://steveklabnik.com/</id>
 <author>
   <name>Steve Klabnik</name>
   <email>steve@steveklabnik.com</email>
 </author>

 
 <entry>
   <title>The Self-Improvement Pomodoro</title>
   <link href="http://blog.steveklabnik.com/2011/09/04/the-self-improvement-pomodoro.html"/>
   <updated>2011-09-04T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/09/04/the-self-improvement-pomodoro</id>
   <content type="html">&lt;p&gt;By now, the &lt;a href=&quot;http://www.pomodorotechnique.com/&quot;&gt;pomodoro technique&lt;/a&gt; is pretty
well-known amongst programmers. I forget where I heard of it first, but
if you haven't, here it is: Break your day up into 30 minute chunks.
Work for 25 minutes, break for 5. Repeat. It's easy to stay concentrated
when you know a break is coming up soon, the fact that you can fit two
in an hour fits with my natural sense of order in the world, and once
you get in the rhythm, you Get Shit Done. Heck, I liked the idea so much
that I &lt;a href=&quot;http://rubygems.org/gems/pomodoro&quot;&gt;made a Ruby gem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That said, I hadn't been following the technique for a while, because
it's easy to lose discipline. Happens to the best of us. Recently,
though, it's crept back into my workflow, largely thanks to Jeff
Casimir. I was even lazy enough to not use my gem, and try something
else. So I grabbed the software he uses from the App Store, and fired it
up. It presented me with an interesting option to give my pomodoro a
name before starting it. Pretty much without thinking, I typed 'rstat.us
rails3 port,' since that's what I was working on, and away I went.&lt;/p&gt;

&lt;p&gt;The more I think about it, however, the more interesting the naming
aspect becomes. I can see how long and how often I'm working on various
things, and over the past few weeks, it's been neat to examine. When
doing some reading this morning, my groggy brain combined a few
different things together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programmers often don't have the time to practice their craft&lt;/li&gt;
&lt;li&gt;I work on a lot of random software projects&lt;/li&gt;
&lt;li&gt;These projects are often of varying quality, especially regarding
things like documentation and tests&lt;/li&gt;
&lt;li&gt;Almost none of the gems that have been released are at a 1.0 release
(can anyone find this blog post for me? I can't. It's something about
&quot;Just Release It&quot;...)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, with an aim of combining all these things, I'm going to give
something a try, and you should too: I'm going to name at least one
pomodoro a day &quot;self-improvement,&quot; and use that time to go back over my
random projects on GitHub and clean them up. I'm going to use that time
to start programming in a totally new language. I'm going to use that
time to do that refactoring I've been avoiding. I'm going to use that
time to read a book.&lt;/p&gt;

&lt;p&gt;Basically, I'm going to force myself to invest in myself. Make sure to
find time to invest in you, too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I'm Making It Dead Simple To Contribute To Ruby's Documentation</title>
   <link href="http://blog.steveklabnik.com/2011/08/22/im-making-it-dead-simple-to-contribute-to-ruby-s-documentation.html"/>
   <updated>2011-08-22T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/08/22/im-making-it-dead-simple-to-contribute-to-ruby-s-documentation</id>
   <content type="html">&lt;p&gt;Okay! So, if you'd read &lt;a href=&quot;/2011/05/10/contributing-to-ruby-s-documentation.html&quot;&gt;my previous article on
this&lt;/a&gt;, you'd know how
easy it is to contribute to Ruby's Documentaiton.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But Steve, I'm &lt;em&gt;still&lt;/em&gt; kinda scared.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Okay, so here we go: I'm making it even easier on you.&lt;/p&gt;

&lt;p&gt;Send me what you want changed, and how, and I'll make a patch and submit
it on your behalf.&lt;/p&gt;

&lt;p&gt;No, seriously, I will. I already did once. &lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/38873&quot;&gt;This guy&lt;/a&gt; posted something about how it was too hard, &lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/38875&quot;&gt;so
I made a patch for him&lt;/a&gt;. And now Ruby is better because of it.&lt;/p&gt;

&lt;h2&gt;Patches don't have to be patches&lt;/h2&gt;

&lt;p&gt;Seriously, I don't even mean diff outputs. I just got this email:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I'm eager to contribute docs but I don't know where to start: I don't
mean pulling down the repo and all that, I mean, I see this link
here:http://segment7.net/projects/ruby/documentation_coverage.txt but
all I see is a ton of &quot;# is documented&quot; comments. Where does a
relative n00b begin? Poking around in the source code is, well,
intimidating. I'm completely new to this but I take direction well.
Just point me in the right direction. Just give me something to
document, please!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I sent this back:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;No code diving needed! That's part of it. Let's do this: Find the documentation for one of your favorite methods. Here, I'll pick one: http://ruby-doc.org/core/classes/Array.html#M000278 okay, that looks okay, but look at compact!:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Removes nil elements from the array. Returns nil if no changes were made, otherwise returns &lt;/i&gt;ary&lt;/i&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why's that &lt;/i&gt; there? Total screw-up.  For example. So, send me this email:&lt;/p&gt;

&lt;p&gt;&quot;Hey Steve-&lt;/p&gt;

&lt;p&gt;Check out the docs for Array#compact!, here: http://ruby-doc.org/core/classes/Array.html#M000279 . There's an extra &lt;/i&gt; that's screwing things up.&lt;/p&gt;

&lt;p&gt;-Jonathan&quot;&lt;/p&gt;

&lt;p&gt;Done! I'll go from there. How about this one:&lt;/p&gt;

&lt;p&gt;&quot;Hey Steve-&lt;/p&gt;

&lt;p&gt;I checked out the docs for Time._load, here: http://www.ruby-doc.org/core/classes/Time.html#M000394&lt;/p&gt;

&lt;p&gt;These docs kind of suck. What if I don't know what Marshal is? There should at &lt;em&gt;least&lt;/em&gt; be a link to Marshall, here: http://ruby-doc.org/core/classes/Marshal.html And it should probably say something like &quot;You can get a dumped Time object by using _dump: http://www.ruby-doc.org/core/classes/Time.html#M000393&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jonathan&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I'm sure you can find something that's formatted wrong, or worded incorrectly, or anything else.&lt;/p&gt;

&lt;p&gt;-Steve&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Now, the &lt;em&gt;closer&lt;/em&gt; it is to an actual patch, the faster I'll be able to
do it. A vague &quot;this documentation is confusing, but I'm not sure why&quot;
is helpful, but will take longer. I'd rather get that email than not. If
you're not sure, hit send.&lt;/p&gt;

&lt;h2&gt;Just Do It&lt;/h2&gt;

&lt;p&gt;And so I'll do it again. Scared to deal with doc patches? I'll make them
up. I'm serious. I'll do it. Send them to me.&lt;/p&gt;

&lt;p&gt;That's all.&lt;/p&gt;

&lt;p&gt;Send me patches.
&lt;a href=&quot;mailto:steve@steveklabnik.com&quot;&gt;steve@steveklabnik.com&lt;/a&gt;. Do it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Matz is Nice So We Are Nice</title>
   <link href="http://blog.steveklabnik.com/2011/08/19/matz-is-nice-so-we-are-nice.html"/>
   <updated>2011-08-19T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/08/19/matz-is-nice-so-we-are-nice</id>
   <content type="html">&lt;p&gt;Rubyists have a saying, or at least, we used to. &quot;Matz is nice so we are
nice.&quot; This has sort of been lost over the years... some people who have
been around Ruby for a long time still say this, but it's something
that's gone in and out of popularity.&lt;/p&gt;

&lt;h2&gt;Nice should be the default&lt;/h2&gt;

&lt;p&gt;Most of being nice, in a software context, is about being considerate.
Not unnecessarily trash talking other people's stuff. Not going out of
your way to be a jerk. Try to be helpful. Treat others how you want to
be treated.&lt;/p&gt;

&lt;h2&gt;Sometimes, the truth hurts&lt;/h2&gt;

&lt;p&gt;Being considerate of others, however, can only go so far. While a lot of
what we do is subjective, a lot of is objective, too. If you're building
a new project, not saying &quot;this is why we're awesome&quot; is silly. Old code
is often bad. Other people's code is often bad. The key in &quot;not
unnecessarily trash talking' is the &lt;em&gt;neccesary&lt;/em&gt; part. There's a
difference between &quot;My library is better&quot; and &quot;My library is better and
their library sucks.&quot;&lt;/p&gt;

&lt;h2&gt;The last thing I'll say about RVM Drama&lt;/h2&gt;

&lt;p&gt;After talking to a few people, I guess I committed a bit of the sin I
was trying to rail against: I got some feedback that it was thought that
I was villainizing Sam, and a little easy on Wayne. This is natural,
because I'm friends with Wayne and I don't really know Sam, but in the
interest of being nice myself, I just want to say this: I think that all
that drama last week was largely a perfect storm of a few different
factors, and I don't think that Sam set out to hurt anyone specifically.
If and when I ever have an issue with RVM, I'm totally going to try out
rbenv. I like having options. I like there being multiple options.
TMTOWTDI. And Sam builds a ton of other software that I really enjoy,
like Sprockets, and pow. There's a big difference between &quot;that guy is
an asshole&quot; and &quot;I think that that situation could have been handled
better.&quot;&lt;/p&gt;

&lt;p&gt;Let's all build lots of cool software together.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>We Forget That Open Source is Made of People</title>
   <link href="http://blog.steveklabnik.com/2011/08/12/we-forget-that-open-source-is-made-of-people.html"/>
   <updated>2011-08-12T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/08/12/we-forget-that-open-source-is-made-of-people</id>
   <content type="html">&lt;p&gt;Programmers like to think that software is the purest form of
meritocracy. We like to consider ourselves scientists; what we do is
entirely impersonal. I'm at Lone Star Ruby right now, and the first two
talks are entirely about software as a science.&lt;/p&gt;

&lt;p&gt;But this is a fallacy. There's a human element to open source that's
often totally forgotten, and it drives people away.&lt;/p&gt;

&lt;h2&gt;Software Celebrity and Hero Worship&lt;/h2&gt;

&lt;p&gt;We sort of acknowledge this, in a way. There are most certainly software
celebrities, even if their celebrity is localized to the community in
which they operate. I heard someone say this today:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If I can go to one Ruby conference and not hear anyone mention Zed
Shaw or _why, I can die happy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If I say &quot;jnicklas&quot; you say &quot;Capybara.&quot; If I say &quot;DHH&quot; you say &quot;Rails.&quot;
If I say &quot;matz&quot; you say &quot;Ruby.&quot; We have our heroes, villains, and foils,
just like anybody else. But we forget that in every celebrity, there is
a real person in there. Actual people, who have real thoughts, feelings,
ideas, emotions, and that spend all of their time working for free just
to make your lives better out of the goodness of their heart. Often
&lt;em&gt;after&lt;/em&gt; working at day jobs, often &lt;em&gt;at the expense&lt;/em&gt; of a personal life,
often &lt;em&gt;straining relationships&lt;/em&gt; with people they care about.&lt;/p&gt;

&lt;h2&gt;Competition Means Somebody Loses&lt;/h2&gt;

&lt;p&gt;I used to think that Git was great because it made forks trivial. It
changed what we mean by 'fork.' This is largely a good thing. But 'the
eff word' used to be a last resort. The nuclear option. You're fed up,
can't take it anymore, and so this is what they've driven you to do.
Forking was Serious Business.&lt;/p&gt;

&lt;p&gt;Now, GitHub has made it so easy to fork a project and distribute it to
tons of people, people just fork things willy-nilly. And, from the
outside, competition is good: in theory, it means that the good ideas
work and the bad ideas don't.&lt;/p&gt;

&lt;p&gt;(A small aside: forking in git is different than 'forking' in svn. This
overloading of terminology is unfortunate. The fork button is actually
one of my favorite features of GitHub, because it makes contribution
easier. But as it's easier to publish new software, it's easier to
'fork' in the svn sense. It used to be a pain to start a new project,
and GitHub's made that so easy that it happens more often than I think
it should.)&lt;/p&gt;

&lt;p&gt;But guess what: competition sucks. Cooperation is much better. One of
the biggest problems with competition is that it means that somebody has
to lose. For every winner, someone is a loser. That person is going to
be hurting. In the case of open source, someone has spent (possibly)
years of their life working on something, and now, all of that is gone.
That shit stings.&lt;/p&gt;

&lt;p&gt;Sometimes, forks are necessary. Sometimes, there are approaches that are
fundamentally different. Forking is still an option, even if it's a last
resort. I'm also not saying that feelings should totally trump technical
merit. All I'm saying is this: consider the blood, sweat, and tears of
others before you act. Just in general.&lt;/p&gt;

&lt;p&gt;It's also not a zero-sum game, either. The pie can be grown. But that
also doesn't mean that it's grown in a way that makes anyone feel good
about it. There's a difference between &quot;We represent two sides of some
coin&quot; and &quot;Those fuckers make shitty software.&quot; Both approaches can grow
the pie. One is far better than the other.&lt;/p&gt;

&lt;p&gt;What's the human cost of rapid competition between software projects? Is
this cost worth it?&lt;/p&gt;

&lt;h2&gt;Open Source: All take, no give&lt;/h2&gt;

&lt;p&gt;The Pareto Principle: 80% of the effects come from 20% of the causes.
This is absolutely true in OSS, and it might be more imbalanced. A few
people contribute, and lots of people use. Sometimes, this is a good
thing: it's actually what draws me to open source. I can help people in
a scalable way. My code is currently being used by tens of thousands of
people. This is awesome. Some documentation that I've written is being
read by millions of people. This is way more awesome.&lt;/p&gt;

&lt;p&gt;But I rarely get any help with my projects. It's really easy to let that
get to a person.&lt;/p&gt;

&lt;p&gt;Do you know how many people have told me that what I do is important? I
got given a Ruby Hero award for my work on Hackety and Shoes. Do you
know how many commits I have in on them? Probably less than 200. Do you
know why? I've spent weeks of my life trying to track down bugs, but some
of them are too hard for me, at my current stage of programming-fu. And
it gets depressing. And everyone that's ever offered to help has flaked
on me. And all the recognition for something that was largely done by
someone else gets to me, really deeply. And I get tons of people
screaming about Lion support, and 'this doesn't work,' and all sorts of
things... and no patches. It's why the 'patches accepted' saying was
coined: this shit grinds on you after a while.&lt;/p&gt;

&lt;h2&gt;All of my Heroes are Dying&lt;/h2&gt;

&lt;p&gt;Today, this situation with rbenv and rvm made me realize something:
everyone that I truly, deeply respect in open source has either burned
out or left. I've said once before that there are four people that I
truly respect in software: Zed Shaw, _why, Yehuda Katz, and (more
recently) Wayne Seguin (and also Aaron Patterson. Dammit. This list is
getting long). All of these developers are brilliant, work hard, and are
tirelessly supporting their communities. That is, until they were driven
away. This isn't totally applicable to Yehuda, but it happened to Zed.
It happened to _why. And I can see it happening, right now, to Aaron
and Wayne. And Yehuda isn't really doing Ruby...&lt;/p&gt;

&lt;p&gt;But seeing this happen makes me deeply sad. For them personally, for my
own selfish reasons, and that that's the state of our communities.&lt;/p&gt;

&lt;h2&gt;Where Does This Leave Us?&lt;/h2&gt;

&lt;p&gt;I don't have any answers. I only have a bunch of questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why do we drive people away from Open Source?&lt;/li&gt;
&lt;li&gt;Can we learn to work together, instead of competing?&lt;/li&gt;
&lt;li&gt;How can we better recognize this human element?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you don't contribute to Open Source: please consider thanking someone
that does open source, in a project that you love. Consider helping out,
in even the smallest of ways.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2011/08/19/matz-is-nice-so-we-are-nice.html&quot;&gt;My next post is a bit of a follow-up to this&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Some People Understand REST and HTTP</title>
   <link href="http://blog.steveklabnik.com/2011/08/07/some-people-understand-rest-and-http.html"/>
   <updated>2011-08-07T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/08/07/some-people-understand-rest-and-http</id>
   <content type="html">&lt;p&gt;This is a follow-up post to my post &lt;a href=&quot;/2011/07/03/nobody-understands-rest-or-http.html&quot;&gt;here&lt;/a&gt;. You probably want to
read that first.&lt;/p&gt;

&lt;h2&gt;A few words on standards versus pragmatism&lt;/h2&gt;

&lt;p&gt;When I wrote my first post on this topic, I tried to take a stance that
would be somewhat soft, yet forceful. Engineering is the art of making
the proper trade-offs, and there are times when following specifications
is simply not the correct decision. With that said, my motivation for
both of these posts is to eradicate some of the ignorance that some
developers have about certain areas of the HTTP spec and Fielding's REST
paper. If you understand the correct way, yet choose to do something
else for an informed reason, that's absolutely, 100% okay. There's no
use throwing out the baby with the bathwater. But ignorance is never a
good thing, and most developers are ignorant when it comes to the
details of REST.&lt;/p&gt;

&lt;p&gt;Secondly, while I think that REST is the best way to develop APIs, there
are other valid architectural patterns, too. Yet calling non-REST APIs
'RESTful' continues to confuse developers as to what &quot;RESTful&quot; means.
I'm not sure what exactly we should call &quot;RESTish&quot; APIs (hey, there we
go, hmmm...) but I'm also not under the illusion that I personally will
be able to make a huge dent in this. Hopefully you, humble reader, will
remember this when dealing with APIs in the future, and I'll have made a
tiny dent, though.&lt;/p&gt;

&lt;h2&gt;So who &lt;em&gt;does&lt;/em&gt; understand REST?&lt;/h2&gt;

&lt;p&gt;As it turns out, there are two companies that you've probably heard of
who have APIs that are much more RESTful than many others: &lt;a href=&quot;http://www.twilio.com/docs/api/rest/&quot;&gt;Twilio&lt;/a&gt;
and &lt;a href=&quot;http://developer.github.com/&quot;&gt;GitHub&lt;/a&gt;. Let's take a look at GitHub first.&lt;/p&gt;

&lt;h3&gt;GitHub: logically awesome&lt;/h3&gt;

&lt;p&gt;GitHub's developer resources are not only beautiful, but thorough. In
addition, they make use of lots more of REST.&lt;/p&gt;

&lt;h4&gt;The good&lt;/h4&gt;

&lt;p&gt;GitHub uses &lt;a href=&quot;http://developer.github.com/v3/mimes/&quot;&gt;custom MIME&lt;/a&gt; types for all of their responses. They're
using the vendor extensions that I talked about in my post, too. For
example:&lt;/p&gt;

&lt;p&gt;  application/vnd.github-issue.text+json&lt;/p&gt;

&lt;p&gt;Super cool.&lt;/p&gt;

&lt;p&gt;Their &lt;a href=&quot;http://developer.github.com/v3/#authentication&quot;&gt;authentication&lt;/a&gt; works in three ways: HTTP Basic, OAuth via an
Authentication Header, or via a parameter. This allows for a maximum
amount of compatibility across user agents, and gives the user some
amount of choice.&lt;/p&gt;

&lt;p&gt;Their &lt;a href=&quot;http://developer.github.com/v3/#pagination&quot;&gt;Pagination&lt;/a&gt; uses a header I didn't discuss in part I: the Link
header. &lt;a href=&quot;http://tools.ietf.org/html/rfc5988&quot;&gt;Here&lt;/a&gt;'s a link to the
reference. Basically, Link headers enable HATEOAS for media types which
aren't hypertext. This is important, especially regarding JSON, since
JSON isn't hypermedia. More on this at the end of the post. Anyway, so
pagination on GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -I &quot;https://api.github.com/users/steveklabnik/gists&quot;
HTTP/1.1 200 OK
Server: nginx/1.0.4
Date: Sun, 07 Aug 2011 16:34:48 GMT
Content-Type: application/json
Connection: keep-alive
Status: 200 OK
X-RateLimit-Limit: 5000
X-RateLimit-Remaining: 4994
Link: &amp;lt;https://api.github.com/users/steveklabnik/gists?page=2&amp;gt;; rel=&quot;next&quot;, &amp;lt;https://api.github.com/users/steveklabnik/gists?page=33333&amp;gt;; rel=&quot;last&quot;
Content-Length: 29841
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Link header there shows you how to get to the next page of results.
You don't need to know how to construct the URL, you just have to parse
the header and follow it. This, for example, is a great way to connect a
resource that's not text-based, such as a PNG, to other resources.&lt;/p&gt;

&lt;h4&gt;The bad&lt;/h4&gt;

&lt;p&gt;There's really only one place that GitHub doesn't knock it out of the
park with their new API, and that's HATEOAS. GitHub's API isn't
discoverable, because there's no information at the root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -I https://api.github.com/
HTTP/1.1 302 Found
Server: nginx/1.0.4
Date: Sun, 07 Aug 2011 16:44:02 GMT
Content-Type: text/html;charset=utf-8
Connection: keep-alive
Status: 302 Found
X-RateLimit-Limit: 5000
Location: http://developer.github.com
X-RateLimit-Remaining: 4993
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, at least, this is how they present it. If you ask for JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -I https://api.github.com/ -H &quot;Accept: application/json&quot;
HTTP/1.1 204 No Content
Server: nginx/1.0.4
Date: Sun, 07 Aug 2011 16:45:32 GMT
Connection: keep-alive
Status: 204 No Content
X-RateLimit-Limit: 5000
X-RateLimit-Remaining: 4991
Link: &amp;lt;users/{user}&amp;gt;; rel=&quot;user&quot;, &amp;lt;repos/{user}/{repo}&amp;gt;; rel=&quot;repo&quot;, &amp;lt;gists&amp;gt;; rel=&quot;gists&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You do get Links, but you have to construct things yourself. As a user,
you get the same thing. It doesn't change the links to point to your
repos, it doesn't give you links to anything else that you can do with
the API.&lt;/p&gt;

&lt;p&gt;Instead, the root should give you a link to the particular resources
that you can actually view. Maybe something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -I https://api.github.com/ -H &quot;Accept: application/json&quot; -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&quot;username:password&quot;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 204 No Content
Server: nginx/1.0.4
Date: Sun, 07 Aug 2011 16:45:32 GMT
Connection: keep-alive
Status: 204 No Content
X-RateLimit-Limit: 5000
X-RateLimit-Remaining: 4991
Link: &amp;lt;/gists/public&amp;gt;; rel=&quot;public_gists&quot;, &amp;lt;/user/repos&amp;gt;; rel=&quot;repos&quot;, &amp;lt;gists&amp;gt;; rel=&quot;gists&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a bunch more, for all of the other resources that are available.
This would make the API truly discoverable, and you wouldn't be forced
to read their gorgeous documentation. :)&lt;/p&gt;

&lt;h3&gt;Twilio&lt;/h3&gt;

&lt;p&gt;I've always really enjoyed Twilio. Their API is incredibly simple to
use. I once hooked up a little &quot;Text me when someone orders something
from my site&quot; script, and it took me about fifteen minutes. Good stuff.&lt;/p&gt;

&lt;h4&gt;The good&lt;/h4&gt;

&lt;p&gt;Twilio has got the HATEOAS thing down. Check it out, their home page
says that the base URL is &quot;https://api.twilio.com/2010-04-01&quot;. Without
looking at any of the rest of their docs, (I glanced at a page or two,
but I didn't really read them fully yet), I did this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://api.twilio.com/2010-04-01
&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;TwilioResponse&amp;gt;
  &amp;lt;Version&amp;gt;
    &amp;lt;Name&amp;gt;2010-04-01&amp;lt;/Name&amp;gt;
    &amp;lt;Uri&amp;gt;/2010-04-01&amp;lt;/Uri&amp;gt;
    &amp;lt;SubresourceUris&amp;gt;
      &amp;lt;Accounts&amp;gt;/2010-04-01/Accounts&amp;lt;/Accounts&amp;gt;
    &amp;lt;/SubresourceUris&amp;gt;
  &amp;lt;/Version&amp;gt;
&amp;lt;/TwilioResponse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I introduced some formatting. Hmm, okay, Accounts. Let's check this out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://api.twilio.com/2010-04-01/Accounts&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;TwilioResponse&amp;gt;&amp;lt;RestException&amp;gt;&amp;lt;Status&amp;gt;401&amp;lt;/Status&amp;gt;&amp;lt;Message&amp;gt;Authenticate&amp;lt;/Message&amp;gt;&amp;lt;Code&amp;gt;20003&amp;lt;/Code&amp;gt;&amp;lt;MoreInfo&amp;gt;http://www.twilio.com/docs/errors/20003&amp;lt;/MoreInfo&amp;gt;&amp;lt;/RestException&amp;gt;&amp;lt;/TwilioResponse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, so I have to be authenticated. If I was, I'd get something like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TwilioResponse&amp;gt;
  &amp;lt;Account&amp;gt;
    &amp;lt;Sid&amp;gt;ACba8bc05eacf94afdae398e642c9cc32d&amp;lt;/Sid&amp;gt;
    &amp;lt;FriendlyName&amp;gt;Do you like my friendly name?&amp;lt;/FriendlyName&amp;gt;
    &amp;lt;Type&amp;gt;Full&amp;lt;/Type&amp;gt;
    &amp;lt;Status&amp;gt;active&amp;lt;/Status&amp;gt;
    &amp;lt;DateCreated&amp;gt;Wed, 04 Aug 2010 21:37:41 +0000&amp;lt;/DateCreated&amp;gt;
    &amp;lt;DateUpdated&amp;gt;Fri, 06 Aug 2010 01:15:02 +0000&amp;lt;/DateUpdated&amp;gt;
    &amp;lt;AuthToken&amp;gt;redacted&amp;lt;/AuthToken&amp;gt;
    &amp;lt;Uri&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d&amp;lt;/Uri&amp;gt;
    &amp;lt;SubresourceUris&amp;gt;
      &amp;lt;AvailablePhoneNumbers&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/AvailablePhoneNumbers&amp;lt;/AvailablePhoneNumbers&amp;gt;
      &amp;lt;Calls&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/Calls&amp;lt;/Calls&amp;gt;
      &amp;lt;Conferences&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/Conferences&amp;lt;/Conferences&amp;gt;
      &amp;lt;IncomingPhoneNumbers&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/IncomingPhoneNumbers&amp;lt;/IncomingPhoneNumbers&amp;gt;
      &amp;lt;Notifications&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/Notifications&amp;lt;/Notifications&amp;gt;
      &amp;lt;OutgoingCallerIds&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/OutgoingCallerIds&amp;lt;/OutgoingCallerIds&amp;gt;
      &amp;lt;Recordings&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/Recordings&amp;lt;/Recordings&amp;gt;
      &amp;lt;Sandbox&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/Sandbox&amp;lt;/Sandbox&amp;gt;
      &amp;lt;SMSMessages&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/SMS/Messages&amp;lt;/SMSMessages&amp;gt;
      &amp;lt;Transcriptions&amp;gt;/2010-04-01/Accounts/ACba8bc05eacf94afdae398e642c9cc32d/Transcriptions&amp;lt;/Transcriptions&amp;gt;
    &amp;lt;/SubresourceUris&amp;gt;
  &amp;lt;/Account&amp;gt;
&amp;lt;/TwilioResponse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome. I can see my all of the other resources that I can interact
with. Other than knowing how to authenticate, I can follow the links
from the endpoint, and discover their entire API. Rock. This is the way
things are supposed to be.&lt;/p&gt;

&lt;h4&gt;The bad&lt;/h4&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://api.twilio.com/2010-04-01/Accounts -H &quot;Accept: application/json&quot;
&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;TwilioResponse&amp;gt;&amp;lt;RestException&amp;gt;&amp;lt;Status&amp;gt;401&amp;lt;/Status&amp;gt;&amp;lt;Message&amp;gt;Authenticate&amp;lt;/Message&amp;gt;&amp;lt;Code&amp;gt;20003&amp;lt;/Code&amp;gt;&amp;lt;MoreInfo&amp;gt;http://www.twilio.com/docs/errors/20003&amp;lt;/MoreInfo&amp;gt;&amp;lt;/RestException&amp;gt;&amp;lt;/TwilioResponse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Versus this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://api.twilio.com/2010-04-01/Accounts.json
{&quot;status&quot;:401,&quot;message&quot;:&quot;Authenticate&quot;,&quot;code&quot;:20003,&quot;more_info&quot;:&quot;http:\/\/www.twilio.com\/docs\/errors\/20003&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:/ Returning JSON when your resource ends with '.json' isn't bad, but
not respecting the Accept header, even when you return the right MIME
type, is just unfortunate.&lt;/p&gt;

&lt;h2&gt;... and a little Announcement&lt;/h2&gt;

&lt;p&gt;It seems that this is a topic that people are really interested in. Part
I of this article was pretty well-received, and I got lots of great
email and feedback from people. It was also made pretty clear by &lt;a href=&quot;http://twitter.com/#!/wayneeseguin/status/97733413611638784&quot;&gt;a few&lt;/a&gt; people that
they want more content from me on this topic.&lt;/p&gt;

&lt;p&gt;So I decided to write a book about it. You can check out the site for
&quot;&lt;a href=&quot;http://getsomere.st&quot;&gt;Get Some REST&lt;/a&gt;&quot;, and put in your email address. Then you'll get
updated when I start pre-release sales.&lt;/p&gt;

&lt;p&gt;So what's in &quot;Get Some REST&quot;? It's going to be a full description of how
to build RESTful web applications, from the ground up. Designing your
resources, laying out an API, all the details. I'm going to try to keep
most of the content language-agnostic, but provide code samples in
Rails 3.1, as well.&lt;/p&gt;

&lt;p&gt;I plan on writing a bunch of content, and then releasing the book at
half-price in beta. Early adopters will be able to get their two cents
in, and I'll cover things they still have questions on. It'll be
available under a liberal license, in PDF, ePub, all that good stuff.&lt;/p&gt;

&lt;p&gt;I've also set up a Twitter account at &lt;a href=&quot;http://twitter.com/#!/getsomerestbook&quot;&gt;@getsomerestbook&lt;/a&gt;. I'll be tweeting updates about the book, and also other good content
related to RESTful design. Oh, and if you're on
&lt;a href=&quot;http://rstat.us&quot;&gt;rstat.us&lt;/a&gt;, I also have an account that'll syndicate
the same content at &lt;a href=&quot;http://rstat.us/users/getsomerestbook&quot;&gt;@getsomerestbook&lt;/a&gt; too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitter is too important to be owned by Twitter</title>
   <link href="http://blog.steveklabnik.com/2011/07/24/twitter-is-to-important-to-be-owned-by-twitter.html"/>
   <updated>2011-07-24T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/07/24/twitter-is-to-important-to-be-owned-by-twitter</id>
   <content type="html">&lt;p&gt;When I spoke on a panel at &lt;a href=&quot;http://therealtimereport.com/&quot;&gt;RTLM NY '11&lt;/a&gt;, I got a little rise out of
the crowd when I said &quot;Twitter is too important to be owned by Twitter.&quot;
This is still absolutely true, and yesterday was a great example of
that: the #fuckyouwashington debacle.&lt;/p&gt;

&lt;p&gt;If you haven't heard, &lt;a href=&quot;http://twitter.com/#!/jeffjarvis&quot;&gt;Jeff Jarvis&lt;/a&gt;
started something on Twitter last night:&lt;/p&gt;

&lt;!-- http://twitter.com/#!/jeffjarvis/status/94919366818279424 --&gt;


&lt;p&gt; &lt;style type='text/css'&gt;.bbpBox94919366818279424 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class='bbpBox94919366818279424'&gt;&lt;p class='bbpTweet'&gt;Hey, Washington assholes, it's our country, our economy, our money. Stop fucking with it.&lt;span class='timestamp'&gt;&lt;a title='Sat Jul 23 23:58:35 +0000 2011' href='http://twitter.com/#!/jeffjarvis/status/94919366818279424'&gt;less than a minute ago&lt;/a&gt; via &lt;a href=&quot;http://www.echofon.com/&quot; rel=&quot;nofollow&quot;&gt;Echofon&lt;/a&gt; &lt;a href='http://twitter.com/intent/favorite?tweet_id=94919366818279424'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png' /&gt; Favorite&lt;/a&gt; &lt;a href='http://twitter.com/intent/retweet?tweet_id=94919366818279424'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png' /&gt; Retweet&lt;/a&gt; &lt;a href='http://twitter.com/intent/tweet?in_reply_to=94919366818279424'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/reply.png' /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class='metadata'&gt;&lt;span class='author'&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;&lt;img src='http://a1.twimg.com/profile_images/41194122/blogdaddy_normal.jpg' /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;Jeff Jarvis&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;jeffjarvis&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;

&lt;!-- http://twitter.com/#!/jeffjarvis/status/94920264428699648 --&gt;


&lt;p&gt; &lt;style type='text/css'&gt;.bbpBox94920264428699648 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class='bbpBox94920264428699648'&gt;&lt;p class='bbpTweet'&gt;People, it's time to get fucking pissed off.&lt;span class='timestamp'&gt;&lt;a title='Sun Jul 24 00:02:09 +0000 2011' href='http://twitter.com/#!/jeffjarvis/status/94920264428699648'&gt;less than a minute ago&lt;/a&gt; via &lt;a href=&quot;http://www.echofon.com/&quot; rel=&quot;nofollow&quot;&gt;Echofon&lt;/a&gt; &lt;a href='http://twitter.com/intent/favorite?tweet_id=94920264428699648'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png' /&gt; Favorite&lt;/a&gt; &lt;a href='http://twitter.com/intent/retweet?tweet_id=94920264428699648'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png' /&gt; Retweet&lt;/a&gt; &lt;a href='http://twitter.com/intent/tweet?in_reply_to=94920264428699648'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/reply.png' /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class='metadata'&gt;&lt;span class='author'&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;&lt;img src='http://a1.twimg.com/profile_images/41194122/blogdaddy_normal.jpg' /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;Jeff Jarvis&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;jeffjarvis&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;

&lt;!-- http://twitter.com/#!/jeffjarvis/status/94920803346419712 --&gt;


&lt;p&gt; &lt;style type='text/css'&gt;.bbpBox94920803346419712 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class='bbpBox94920803346419712'&gt;&lt;p class='bbpTweet'&gt;Can we start a Twitter chant: FUCK YOU, WASHINGTON! Pass it on.&lt;span class='timestamp'&gt;&lt;a title='Sun Jul 24 00:04:17 +0000 2011' href='http://twitter.com/#!/jeffjarvis/status/94920803346419712'&gt;less than a minute ago&lt;/a&gt; via &lt;a href=&quot;http://www.echofon.com/&quot; rel=&quot;nofollow&quot;&gt;Echofon&lt;/a&gt; &lt;a href='http://twitter.com/intent/favorite?tweet_id=94920803346419712'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png' /&gt; Favorite&lt;/a&gt; &lt;a href='http://twitter.com/intent/retweet?tweet_id=94920803346419712'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png' /&gt; Retweet&lt;/a&gt; &lt;a href='http://twitter.com/intent/tweet?in_reply_to=94920803346419712'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/reply.png' /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class='metadata'&gt;&lt;span class='author'&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;&lt;img src='http://a1.twimg.com/profile_images/41194122/blogdaddy_normal.jpg' /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;Jeff Jarvis&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;jeffjarvis&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;

&lt;p&gt;Lots of people were talking about the possibility of a &lt;a href=&quot;http://www.msnbc.msn.com/id/43864749/ns/politics-capitol_hill/t/congressional-leaders-work-avert-default/&quot;&gt;government
default&lt;/a&gt;, but it ended up being a catch-all for any sort of venting
that citizens had against their government. And they had &lt;a href=&quot;https://plus.google.com/105076678694475690385/posts/iFyTBwVmyKs&quot;&gt;a large
variety of things to say.&lt;/a&gt; But then, of course, this happens:&lt;/p&gt;

&lt;!-- http://twitter.com/#!/jeffjarvis/status/94945261050273792 --&gt;


&lt;p&gt; &lt;style type='text/css'&gt;.bbpBox94945261050273792 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class='bbpBox94945261050273792'&gt;&lt;p class='bbpTweet'&gt;Search for trending topic Schmucks and then search for &lt;a href=&quot;http://twitter.com/search?q=%23fuckyouwashington&quot; title=&quot;#fuckyouwashington&quot; class=&quot;tweet-url hashtag&quot; rel=&quot;nofollow&quot;&gt;#fuckyouwashington&lt;/a&gt;. No comparison. Blowing past it.&lt;span class='timestamp'&gt;&lt;a title='Sun Jul 24 01:41:28 +0000 2011' href='http://twitter.com/#!/jeffjarvis/status/94945261050273792'&gt;less than a minute ago&lt;/a&gt; via &lt;a href=&quot;http://www.echofon.com/&quot; rel=&quot;nofollow&quot;&gt;Echofon&lt;/a&gt; &lt;a href='http://twitter.com/intent/favorite?tweet_id=94945261050273792'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png' /&gt; Favorite&lt;/a&gt; &lt;a href='http://twitter.com/intent/retweet?tweet_id=94945261050273792'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png' /&gt; Retweet&lt;/a&gt; &lt;a href='http://twitter.com/intent/tweet?in_reply_to=94945261050273792'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/reply.png' /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class='metadata'&gt;&lt;span class='author'&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;&lt;img src='http://a1.twimg.com/profile_images/41194122/blogdaddy_normal.jpg' /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href='http://twitter.com/jeffjarvis'&gt;Jeff Jarvis&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;jeffjarvis&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;

&lt;!-- http://twitter.com/#!/jaycousins/status/95106114391261184 --&gt;


&lt;p&gt; &lt;style type='text/css'&gt;.bbpBox95106114391261184 {background:url(http://a2.twimg.com/profile_background_images/32742344/jaytwitter.jpg) #9AE4E8;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class='bbpBox95106114391261184'&gt;&lt;p class='bbpTweet'&gt;WTF! &lt;a href=&quot;http://twitter.com/search?q=%23fuckyouwashington&quot; title=&quot;#fuckyouwashington&quot; class=&quot;tweet-url hashtag&quot; rel=&quot;nofollow&quot;&gt;#fuckyouwashington&lt;/a&gt; blocked from trending but not &lt;a href=&quot;http://twitter.com/search?q=%23blamethemuslims&quot; title=&quot;#blamethemuslims&quot; class=&quot;tweet-url hashtag&quot; rel=&quot;nofollow&quot;&gt;#blamethemuslims&lt;/a&gt; (mmm &lt;a href=&quot;http://twitter.com/search?q=%23fuckyoutwitter&quot; title=&quot;#fuckyoutwitter&quot; class=&quot;tweet-url hashtag&quot; rel=&quot;nofollow&quot;&gt;#fuckyoutwitter&lt;/a&gt; ?)&lt;span class='timestamp'&gt;&lt;a title='Sun Jul 24 12:20:39 +0000 2011' href='http://twitter.com/#!/jaycousins/status/95106114391261184'&gt;less than a minute ago&lt;/a&gt; via web &lt;a href='http://twitter.com/intent/favorite?tweet_id=95106114391261184'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png' /&gt; Favorite&lt;/a&gt; &lt;a href='http://twitter.com/intent/retweet?tweet_id=95106114391261184'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png' /&gt; Retweet&lt;/a&gt; &lt;a href='http://twitter.com/intent/tweet?in_reply_to=95106114391261184'&gt;&lt;img src='http://si0.twimg.com/images/dev/cms/intents/icons/reply.png' /&gt; Reply&lt;/a&gt;&lt;/span&gt;&lt;span class='metadata'&gt;&lt;span class='author'&gt;&lt;a href='http://twitter.com/jaycousins'&gt;&lt;img src='http://a2.twimg.com/profile_images/384407232/me5_normal.jpg' /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href='http://twitter.com/jaycousins'&gt;jaycousins&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;jaycousins&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;

&lt;p&gt;As of right this second, when I &lt;a href=&quot;http://twitter.com/#!/search/realtime/%23fuckyouwashington&quot;&gt;search for #fuckyouwashington on
Twitter&lt;/a&gt;, they're coming in at two or three a second. It's crazy. And
it's really interesting to read what people have to say, pro and con,
picking their own issues, all of that stuff. Yet, it's been removed from
the trending topics.&lt;/p&gt;

&lt;p&gt;Now, maybe this particular trend was simply blocked because of the
profanity. Sure, whatever. I don't like that, but some might. And
Twitter certainly allows all kinds of trends to stick around that would
also be 'offensive,' for example, #babymakingsong, #turnoff, and
 #itsalwaystheuglypeople are currently trending. Don't even get me
started on trends like #whatblackgirlslike #whatwhitegirls like and the
other racially charged topics. Sure, fine, it's their site, they can do
whatever they want.&lt;/p&gt;

&lt;p&gt;That, however, is the root of the issue: they can do whatever they want.
And we're all beholden to them. Nothing we can do. Maybe I'm not
sensitive to four letter words, and I &lt;em&gt;do&lt;/em&gt; want to hear about things
like this. Too bad, Twitter says no. Maybe I don't want &lt;a href=&quot;http://venturebeat.com/2011/07/08/twitter-adding-promoted-tweets-to-your-stream-this-summer/&quot;&gt;promoted tweets
added to my stream&lt;/a&gt;. Too bad, Twitter says yes.&lt;/p&gt;

&lt;p&gt;And that's why I'm feeling worse and worse about Twitter every day. It
sucks, because I really like Twiter, the website. But Twitter, the
company, really bums me out. They promised all of us nerds long ago that
they wouldn't do this kind of thing, and they're not keeping that
promise. Which means I'm not really getting emotionally invested in
Twitter any more. It's still valuable enough to me to keep using, but I
can't care about it the way I used to.&lt;/p&gt;

&lt;p&gt;This is why we're still hacking away at &lt;a href=&quot;http://rstat.us&quot;&gt;rstat.us&lt;/a&gt;. If you haven't
heard about it before, you can &lt;a href=&quot;http://blog.steveklabnik.com/2011/03/23/announcing-rstat-us.html&quot;&gt;read my release announcement&lt;/a&gt;. If
you're lazier than that, here's the summary: rstat.us is a distributed,
open-source Twitter. You can use our public node at the website, or get
your own copy of the code and run your own, make whatever customizations
you'd like, and you're still on equal footing with everyone else in the
network. We're on the cusp of a 1.0 announcement, and I'd love to have
been able to make that in this post, but we're still working out some
last kinks. If you've seen it before, you won't find much differences
right now, but we have 100% standards compliance, a complete visual
refresh, and some other fun goodies waiting in the wings, ready to come
out shortly.&lt;/p&gt;

&lt;p&gt;Just remember: if you use a service like Twitter that's controlled by a
company like Twitter, you have to play by their rules. And sometimes,
they'll change the rules, and it'll be time to move on.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nobody Understands REST or HTTP</title>
   <link href="http://blog.steveklabnik.com/2011/07/03/nobody-understands-rest-or-http.html"/>
   <updated>2011-07-03T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/07/03/nobody-understands-rest-or-http</id>
   <content type="html">&lt;p&gt;Update: Part II of this post is &lt;a href=&quot;/2011/08/07/some-people-understand-rest-and-http.html&quot;&gt;here&lt;/a&gt;. Check it out, and there's an announcement at the end!&lt;/p&gt;

&lt;p&gt;The more that I've learned about web development, the more that I've
come to appreciate the thoroughness and thoughtfulness of the authors of
the HTTP RFC and Roy Fielding's dissertation. It seems like the answers
to most problems come down to &quot;There's a section of the spec for that.&quot;
Now, obviously, they're not infallible, and I'm not saying that there's
zero room for improvement. But it really disappoints me when people
don't understand the way that a given issue is supposed to be solved,
and so they make up a partial solution that solves their given case but
doesn't jive well with the way that everything else works. There are
valid criticisms of the specs, but they have to come from an informed
place about what the spec says in the first place.&lt;/p&gt;

&lt;p&gt;Let's talk about a few cases where either REST or HTTP (which is clearly
RESTful in its design) solves a common web development problem.&lt;/p&gt;

&lt;h3&gt;I need to design my API&lt;/h3&gt;

&lt;p&gt;This one is a bit more general, but the others build off of it, so bear
with me.&lt;/p&gt;

&lt;p&gt;The core idea of REST is right there in the name: &quot;Representational
State Transfer&quot; It's about transferring representations of the state...
of resources. Okay, so one part isn't in the name. But still, let's
break this down.&lt;/p&gt;

&lt;h4&gt;Resources&lt;/h4&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1&quot;&gt;Fielding's dissertation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The key abstraction of information in REST is a resource. Any information
that can be named can be a resource: a document or image, a temporal service
(e.g. &quot;today's weather in Los Angeles&quot;), a collection of other resources, a
non-virtual object (e.g. a person), and so on. In other words, any concept that
might be the target of an author's hypertext reference must fit within the
definition of a resource. A resource is a conceptual mapping to a set of
entities, not the entity that corresponds to the mapping at any particular
point in time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When we interact with a RESTful system, we're interacting with a set of
resources. Clients request resources from the server in a variety of
ways. But the key thing here is that resources are &lt;em&gt;nouns&lt;/em&gt;. So a RESTful
API consists of a set of URIs that map entities in your system to
endpoints, and then you use HTTP itself for the verbs. If your URLs have
action words in them, you're doing it wrong. Let's look at an example of
this, from the early days of Rails. When Rails first started messing
around with REST, the URLs looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/posts/show/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use Rails today, you'll note that the corresponding URL is
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/posts/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? Well, it's because the 'show' is unnecessary; you're performing a
GET request, and that demonstrates that you want to show that resource.
It doesn't need to be in the URL.&lt;/p&gt;

&lt;h4&gt;A digression about actions&lt;/h4&gt;

&lt;p&gt;Sometimes, you need to perform some sort of action, though. Verbs are
useful. So how's this fit in? Let's consider the example of transferring
money from one Account to another. You might decided to build a URI like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /accounts/1/transfer/500.00/to/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to transfer $500 from Account 1 to Account 2. But this is wrong! What
you really need to do is consider the nouns. You're not transferring
money, you're creating a Transaction resource:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /transactions HTTP/1.1
Host: &amp;lt;snip, and all other headers&amp;gt;

from=1&amp;amp;to=2&amp;amp;amount=500.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Got it? So then, it returns the URI for your new Transaction:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 201 OK
Date: Sun, 3 Jul 2011 23:59:59 GMT
Content-Type: application/json
Content-Length: 12345
Location: http://foo.com/transactions/1

{&quot;transaction&quot;:{&quot;id&quot;:1,&quot;uri&quot;:&quot;/transactions/1&quot;,&quot;type&quot;:&quot;transfer&quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoah, &lt;a href=&quot;http://timelessrepo.com/haters-gonna-hateoas&quot;&gt;HATEOS&lt;/a&gt;! Also, it
may or may not be a good idea to return this JSON as the body; the
important thing is that we have the Location header which tells us where
our new resource is. If we give a client the ID, they might try to
construct their own URL, and the URI is a little redundant, since we
have one in the Location. Regardless, I'm leaving that JSON there,
because that's the way I typed it first. I'd love to &lt;a href=&quot;mailto:steve@steveklabnik.com&quot;&gt;hear your thoughts
on this&lt;/a&gt; if you feel strongly one way or
the other.&lt;/p&gt;

&lt;p&gt;EDIT: I've since decided that yes, including the URI is a bad idea. The
Location header makes much more sense. More on this in Part ii, yet to
come.&lt;/p&gt;

&lt;p&gt;Anyway, so now we can GET our Transaction:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /transactions/1 HTTP/1.1
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 blah blah blah

{&quot;id&quot;:1,&quot;type&quot;:&quot;transfer&quot;,&quot;status&quot;:&quot;in-progress&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we know it's working. We can continue to poll the URI and see when
our transaction is finished, or if it failed, or whatever. Easy! But
it's about manipulating those nouns.&lt;/p&gt;

&lt;h4&gt;Representations&lt;/h4&gt;

&lt;p&gt;You'll notice a pair of headers in the above HTTP requests and
responses: Accept and Content-Type. These describe the different
'representation' of any given resource. From &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_2&quot;&gt;Fielding&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;REST components perform actions on a resource by using a representation to
capture the current or intended state of that resource and transferring that
representation between components. A representation is a sequence of bytes,
plus representation metadata to describe those bytes. Other commonly used but
less precise names for a representation include: document, file, and HTTP
message entity, instance, or variant.&lt;/p&gt;

&lt;p&gt;A representation consists of data, metadata describing the data, and, on
occasion, metadata to describe the metadata (usually for the purpose of
verifying message integrity).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So &lt;code&gt;/accounts/1&lt;/code&gt; represents a resource. But it doesn't include the form
that the resource takes. That's what these two headers are for.&lt;/p&gt;

&lt;p&gt;This is also why adding &lt;code&gt;.html&lt;/code&gt; to the end of your URLs is kinda silly.
If I request &lt;code&gt;/accounts/1.html&lt;/code&gt; with an &lt;code&gt;Accept&lt;/code&gt; header of
&lt;code&gt;application/json&lt;/code&gt;, then I'll get JSON. The &lt;code&gt;Content-Type&lt;/code&gt; header is the
server telling us what kind of representation it's sending back as well.
The important thing, though, is that a given resource can have many
different representations. Ideally, there should be one unambiguous
source of information in a system, and you can get different
representations using &lt;code&gt;Accept&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;State and Transfer&lt;/h4&gt;

&lt;p&gt;This is more about the way HTTP is designed, so I'll just keep this
short: Requests are designed to be stateless, and the server holds all
of the state for its resources. This is important for caching and a few
other things, but it's sort of out of the scope of this post.&lt;/p&gt;

&lt;p&gt;Okay. With all of that out of the way, let's talk about some more
specific problems that REST/HTTP solve.&lt;/p&gt;

&lt;h3&gt;I want my API to be versioned&lt;/h3&gt;

&lt;p&gt;The first thing that people do when they want a versioned API is to
shove a /v1/ in the URL. &lt;em&gt;&lt;em&gt;THIS IS BAD!!!!!1&lt;/em&gt;&lt;/em&gt;. &lt;code&gt;Accept&lt;/code&gt; solves this
problem. What you're really asking for is &quot;I'd like the version two
representation of this resource.&quot; So use accept!&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /accounts/1 HTTP/1.1
Accept: application/vnd.steveklabnik-v2+json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll notice a few things: we have a + in our MIME type, and before it
is a bunch of junk that wasn't there before. It breaks down into three
things: &lt;code&gt;vnd&lt;/code&gt;, my name, and &lt;code&gt;v2&lt;/code&gt;. You can guess what v2 means, but what
about &lt;code&gt;vnd&lt;/code&gt;. It's a &lt;a href=&quot;http://tools.ietf.org/html/rfc4288#section-3.2&quot;&gt;Vendor MIME Type&lt;/a&gt;.
After all, we don't really want just any old JSON, we want my specific
form of JSON. This lets us still have our one URL to represent our
resource, yet version everything appropriately.&lt;/p&gt;

&lt;p&gt;I got a comment from &lt;a href=&quot;http://avdi.org/&quot;&gt;Avdi Grimm&lt;/a&gt; about this, too:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Here's an article you might find interesting: &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1566460&quot;&gt;http://www.informit.com/articles/article.aspx?p=1566460&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The author points out that MIMETypes can have parameters, which means you can actually have a mimetype that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vnd.example-com.foo+json; version=1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly, Rails does not (yet) understand this format.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;I'd like my content to be displayed in multiple languages&lt;/h3&gt;

&lt;p&gt;This is related, but a little different. What about pages in different
languages? Again, we have a question of representation, not one of
content. /en/whatever is not appropriate here. Turns out, &lt;a href=&quot;http://tools.ietf.org/html/rfc2616#section-14.4&quot;&gt;there's a
header for that: Accept-Language&lt;/a&gt;.
Respect the headers, and everything works out.&lt;/p&gt;

&lt;p&gt;Oh, and I should say this, too: this doesn't solve the problem of &quot;I'd
like to read this article in Spanish, even though I usually browse in
English.&quot; Giving your users the option to view your content in different
ways is a good thing. Personally, I'd consider this to fall out in two
ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's temporary. Stick this option in the session, and if they have the
option set, it trumps the header. You're still respecting their usual
preferences, but allowing them to override it.&lt;/li&gt;
&lt;li&gt;It's more permanent. Make it some aspect of their account, and it
trumps a specific header. Same deal.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;I'd like my content to have a mobile view&lt;/h3&gt;

&lt;p&gt;Sounds like I'm beating a dead horse, but again: it's a representation
question. In this case, you'd like to vary the response by the
User-Agent: give one that's mobile-friendly. There's a whole list of
&lt;a href=&quot;http://www.w3.org/TR/mobile-bp/&quot;&gt;mobile best practices&lt;/a&gt; that the w3c
recommends, but the short of it is this: the User-Agent should let you
know that you're dealing with a mobile device. For example, here's the
first iPhone UA:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, once detecting you have a mobile User-Agent, you'd give back a
mobile version of the site. Hosting it on a subdomain is a minor sin,
but really, like I said above, this is really a question of
representation, and so having two URLs that point to the same resource
is kinda awkward.&lt;/p&gt;

&lt;p&gt;Whatever you do, for the love of users, please don't detect these
headers, then redirect your users to m.whatever.com, at the root. One of my
local news websites does this, and it means that every time I try to follow a
link from Twitter in my mobile browser, I don't see their article, I see
their homepage. It's infuriating.&lt;/p&gt;

&lt;h3&gt;I'd like to hide some of my content&lt;/h3&gt;

&lt;p&gt;Every once in a while, you see a story like this: &lt;a href=&quot;http://www.boingboing.net/2010/10/25/local-newspaper-boas.html&quot;&gt;Local paper boasts
ultimate passive-agressive paywall policy&lt;/a&gt;.
Now, I find paywalls distasteful, but this is not the way to do it.
There are technological means to limit content on the web: making users
be logged-in to read things, for example.&lt;/p&gt;

&lt;p&gt;When this was discussed on Hacker News, &lt;a href=&quot;http://news.ycombinator.com/item?id=1834075&quot;&gt;here's&lt;/a&gt;
what I had to say:&lt;/p&gt;

&lt;p&gt;nkurz:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I presume if I had an unattended roadside vegetable stand with a cash-box, that I'd be able to prosecute someone who took vegetables without paying, certainly if they also made off with the cash-box. Why is this different on the web? And if a written prohibition has no legal standing, why do so many companies pay lawyers to write click-through &quot;terms of service&quot; agreements?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;me:&lt;/p&gt;

&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Why is this different on the web?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let's go through what happens when I visit a web site. I type a URL in my bar, and hit enter. My web browser makes a request via http to a server, and the server inspects the request, determines if I should see the content or not, and returns either a 200 if I am allowed, and a 403 if I'm not. So, by viewing their pages, I'm literally asking permission, and being allowed.&lt;/p&gt;

&lt;p&gt;It sounds to me like a misconfiguration of their server; it's not doing what they want it to.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;I'd like to do some crazy ajax, yet have permalinks&lt;/h3&gt;

&lt;p&gt;This is an example of where the spec is obviously deficient, and so
something had to be done.&lt;/p&gt;

&lt;p&gt;As the web grew, AJAXy 'web applications' started to become more and
more the norm. And so applications wanted to provide deep-linking
capabilities to users, but there's a problem: they couldn't manipulate
the URL with Javascript without causing a redirect. They &lt;em&gt;could&lt;/em&gt;
manipulate the anchor, though. You know, that part after the #. So,
Google came up with a convention: &lt;a href=&quot;http://code.google.com/web/ajaxcrawling/docs/getting-started.html&quot;&gt;Ajax Fragments&lt;/a&gt;.
This fixed the problem in the short term, but then the spec got fixed in
the long term: &lt;a href=&quot;http://dev.w3.org/html5/spec-author-view/history.html&quot;&gt;pushState&lt;/a&gt;.
This lets you still provide a nice deep URL to your users, but not have
that awkward #!.&lt;/p&gt;

&lt;p&gt;In this case, there was a legitimate technical issue with the spec, and
so it's valid to invent something. But then the standard improved, and
so people should stop using #! as HTML5 gains browser support.&lt;/p&gt;

&lt;h3&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;Seriously, most of the problems that you're solving are social, not
technical. The web is decades old at this point, most people have
considered these kinds of problems in the past. That doesn't mean that
they always have the right answer, but they usually do have an answer,
and it'd behoove you to know what it is before you invent something on
your own.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Single text, many masters</title>
   <link href="http://blog.steveklabnik.com/2011/05/21/single-text-many-masters.html"/>
   <updated>2011-05-21T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/05/21/single-text-many-masters</id>
   <content type="html">&lt;p&gt;Hey everyone. Here's a draft of an essay I've been working on. I'd love
to hear your feedback.&lt;/p&gt;

&lt;p&gt;The word 'engineering' has a deep connection to the word 'trade-offs' in
my mind. Most engineering decisions come down to evaluating a few
differing alternatives, and often multiple factors end up being
negatively correlated. You can make something stronger, but then it will
be heavier. It can be made faster, but then it's significantly more
expensive. A good engineer is able to take all of these factors into
account, and design a system such that it maximizes its effectiveness
across the sum of all of the relevant constraints. No matter if you consider
the act of writing software an art, science, or engineering, its indisputable
that designing complex software systems is identical in this respect. There are
dozens of different metrics that system architects take into consideration while
crafting a plan of attack, but but there's a deeper question of balance
here that's significantly different than these more traditional
engineering issues.&lt;/p&gt;

&lt;p&gt;Text, in the form of source code, presents unique challenges of
composition. These difficulties all stem from the same root: source code is a
singular text, but must be intelligible to multiple, simultaneous
audiences. More traditional forms of authorship still take audience into
consideration, of course, but the decision to engage a diverse group of
people is the choice of the writer. While mass appeal may be
something that certain authors strive to attain, it's not an inherent
property of their chosen form of expression. Source code, while text,
inhabits a multiplicity of forms, and software developers are confronted
with this inherent multi-faceted complexity when composing any
particular software work. Some of these forms suit certain audiences
better than others, and so it falls to the programmer to manage which
form they are currently working in, consider which audience they are
attempting to write for, and arrange all of these forms amongst one
another in such a way that any particular audience is able to navigate
and extract the proper information from the source without confusion.&lt;/p&gt;

&lt;p&gt;In this post, I'll expand on the concept of audiences for code, and in a
future post, I'll explore the simultaneous forms that code takes.&lt;/p&gt;

&lt;h2&gt;The multitude of audiences&lt;/h2&gt;

&lt;h3&gt;The default audience: the computer&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Science is what we understand well enough to explain to a computer. Art
is everything else we do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don Knuth&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This may seem obvious, but the when considering the question of &quot;Who are
programs written for?&quot;, many would say &quot;The computer. Duh.&quot; In many
ways, a computer is the primary reader of a particular piece of source
code. The code that's given to a computer will be executed billions of
times per second, repeated, recalculated, and re-interpreted over and
over and over again.&lt;/p&gt;

&lt;p&gt;The computer's native understanding of software comes from machine
code. Machine code are the binary numbers that the CPU loads into memory
and processes directly. For example, here's a line of machine code for
an x86 machine that puts the value '97' into the AL register, graciously
stolen &lt;a href=&quot;http://en.wikipedia.org/wiki/Assembly_language#Assembly_language&quot;&gt;from
Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10110000 01100001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While most would consider this unintelligible, computers were actually
programmed this way at one time. My uncle actually did this by flipping
switches to set the binary and pushed a button to store it in memory.
Unfortunately, what's good for the computer isn't good for the human
programmer. This is why assembly language was created. Assembly language
has a 1 to 1 mapping to machine code, but is much easier for humans to
understand. Here's that same line in assembly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MOV AL, 61h       ; Load AL with 97 decimal (61 hex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;MOV&lt;/code&gt; corresponds with &lt;code&gt;10110&lt;/code&gt;, &lt;code&gt;AL&lt;/code&gt; maps to &lt;code&gt;000&lt;/code&gt;, and 61 hex is
&lt;code&gt;01100001&lt;/code&gt;. &lt;code&gt;MOV&lt;/code&gt; is short for 'move,' though, and this mnemonic is just
a bit easier to understand than &lt;code&gt;10110&lt;/code&gt;. This is the most basic example
of a compositional trade-off. It's not a true trade-off, because they
map perfectly to one another, but it illustrates the difference between
composing in a language that the computer understands and one that's
more natural for the programmer. Another important concept comes into
play, that of &lt;em&gt;compilation&lt;/em&gt;. Virtually every work of composition created
in software is automatically translated to another form before it is
executed. We'll address this concept more fully when we discuss form
later.&lt;/p&gt;

&lt;p&gt;If that's where assembly stopped, it would remain a 1 to 1 mapping.
However, virtually every assembly language also offers macros, and this
moves the code further away from the machine and destroys the
synchrony of the two forms. Here's an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MOV EAX, [EBX]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;[]&lt;/code&gt; characters change the meaning of &lt;code&gt;EBX&lt;/code&gt;, rather than be the
value stored in that particular register, they imply that the value is a
memory address, and we want to move the contents of that address to
&lt;code&gt;EAX&lt;/code&gt;. The generated machine code could now be processed into multiple
valid assembly forms, and so the transformation is only perfect in one
direction, even if it's possible to 'decompile' it into one of those
possible encodings. This is considered to be an acceptable trade-off for
human readability; we very rarely want to turn machine code back into
assembly.&lt;/p&gt;

&lt;p&gt;There's also a jump between higher level languages, as well. Here's the
assembly statements that adds 2 and 3 together:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MOV EAX, 2
ADD EAX, 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt;, of course, is the statement that adds a number to the register
that's given. Now &lt;code&gt;EAX&lt;/code&gt; has the value 5. Here's the same code, but in C:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int x = 2;
x = x + 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple. You can see how the C is much easier to understand; we
say what type &lt;code&gt;x&lt;/code&gt; is (an integer), and it's a bit more explicit. &lt;code&gt;x&lt;/code&gt; is
equal to &lt;code&gt;x&lt;/code&gt; + three. However, since the C is divorced from the machine,
and is written for the person, we can change our compiler to make
assembly code that works on a different kind of processor architecture.
If we were to compile the above C for x86_64, a 64 bit version of x86,
we might get some assembly that'd look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MOVL RAX, 2
ADDL RAX, 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this code looks similar to the above, it is quite different. This
uses the native 64 bit types, rather than the 32 bit types above. The
other important thing is that by writing code that's divorced from the
machine, and written for people, we're able to translate it into the
code for multiple machines. If we had written the assembly above, when
moving to another architecture, it would have required a total re-write.
And while this particular sample looks very similar, a more complex
piece of code will be significantly divergent, but I don't want to go
into the details of two kinds of assembly code. Because we can define
the languages for humans, and the language of computers is somewhat
beholden to the physical machine itself, it's significantly easier to do
the translation from C to the two kinds of machines, rather than trying
to translate from one machine to another. What we lose in this kind of
translation, though, is efficiency. Code that was hand-crafted for each
machine would be more performant, and better represent each individual
platform.&lt;/p&gt;

&lt;p&gt;Even though we may choose to use a language that's more understandable
to people, it still has to be understood by the computer in some form.
This translation will introduce some amount of penalty, and so it's
important that this gets taken into consideration. Sometimes, code must
be written in a way that's not easy for a person to read, because it's
easier for the computer to be efficient with a more opaque
implementation.&lt;/p&gt;

&lt;h3&gt;The reflexive audience: the programmer himself&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are, by
definition, not smart enough to debug it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brian Kernighan&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everyone who writes code has experienced this at some time or another.
You write a whole bunch of code, and then a few months goes by, and you
take a look at it, and it's absolutely unintelligible. This happens
because at the time of inception, the author of a particular piece of
code has an incredibly close relationship to it. As it was just written,
the code is obvious to the author. They're in the proper mindset to
understand the intention that was drawn upon to necessitate bringing
those lines into the world, and so no extra explanation is necessary. As
time goes on, however, the author becomes more close to the third
audience, other programmers. It's important for coders to recognize this
fact, and take preventative steps to ameliorate this confusion.&lt;/p&gt;

&lt;p&gt;Even though the author will approach the position of the other audience
eventually, this audience is distinct because there is a certain level
of explanation that sits between undocumented, inexpressive code and
code that's well explained, and this is the position most code is in. An
explanation that's helpful to those who understand the code, but not to
those who don't is better than nothing. This sort of code may be overly
contextual, and could use some added information to improve its clarity.&lt;/p&gt;

&lt;h3&gt;The other audience: colleagues and coworkers&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Always code as if the guy who ends up maintaining your code is a violent
psychopath who knows where you live.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Martin Golding&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I touched on earlier, there's a similarity between the 'other'
audience and the reflexive. The primary distinction is drawn around the
proximity to the source. The other does not have the advantage of having
authored the code, and therefore doesn't have the native's understanding
of the underlying logical organization of the source. This disadvantage
can be overcome via composing in such a manner that the meaning is
emergent from the design. Even if it's too complex to be obvious, good
documentation can address this particular deficiency.&lt;/p&gt;

&lt;p&gt;Ultimately, much of software design is about modeling. Software that
solves a particular problem should emulate the nature of the challenge
it's attempting to address. If this can be achieved, it's significantly
easier for those who understand the problem to figure out how the
software works. Therefore, good design can help improve the
effectiveness of a given piece of source to communicate its intent.
Along a similar vector, if the design is similar to code that solves a
particular issue, it's easier to understand. As an example, a friend
recently asked for feedback about an interface that he'd designed. It
loaded a save game file for StarCraft 2. This is what he came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;replay_file = File.new(&quot;spec/fixtures/1v1-game1.sc2replay&quot;)
@replay = SC2Refinery::Parser.parse(replay_file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, Ruby already has several kinds of code in its standard library
that loads some information from disk and parses it into some kind of
data structure that you can use in your program. The JSON, YAML, and
Marshall classes already use a set of methods to import and export data,
and they're named &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt;, and they're part of the class
directly. Also, in this case, the user of the code shouldn't need to
deal with the creation of a file, since it's unreasonable to assume that
a game replay would come from any other source. Therefore, after some
discussion, he adopted the following interface instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@replay = SC2Refinery.load(&quot;spec/fixtures/1v1-game1.sc2replay&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is much nicer to use, and is much simpler. While it may not seem
like a whole lot, when rules like this are applied across an entire
codebase, they can significantly increase understanding. Multiple
reductions of mental overhead add up quickly.&lt;/p&gt;

&lt;p&gt;My new favorite trick for adding a little bit of modeling that
significantly reduces overhead for the user is the Presenter Pattern.
Jeff Casimir demonstrated this very clearly in his presentation at
RailsConf 2011, &quot;&lt;a href=&quot;http://dl.dropbox.com/u/69001/Fat%20Models%20Aren%27t%20Enough%20-%20RailsConf.pdf&quot;&gt;Fat Models Aren't
Enough&lt;/a&gt;&quot;.
Here's a slightly modified example. Imagine that we have a system that
manages students, and we'd like to display a report card for them. We
might start with some code that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = Student.find(options[:student_id])
term = Term.find(options[:term_id])
report_type = ReportType.find(options[:report_type])

puts &quot;#{student.last_name}, #{student.first_name}&quot;
puts &quot;#{report_type.report_title} for #{term.start_date} to #{term.end_date}&quot;
student.courses.each do |course|
  course_report = student.report_data_for_course(course)
  puts course_report.to_s
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Honestly, until this past week, this is the exact code that I would have
written. But it turns out that we can do better. Basically, we're
displaying some information that comes from a combination of three
different objects. If we think about it some more, we're really trying
to display a report card. So let's make an object that represents the
card, and delegates to its sub-objects. It will then know how to display
itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ReportCard
  delegate :start_date, :end_date, :to =&amp;gt; :term
  delegate :first_name, :last_name, :courses, :report_data_for_course, :to =&amp;gt; :student
  delegate :report_title, :to =&amp;gt; :report_type

  def initialize(params)
    @student = Student.find params[:student_id]
    @term = Term.find params[:term_id]
    @report_type = ReportType.find params[:report_type_id]
  end

  def student_name
    [last_name, first_name].join(&quot;, &quot;)
  end

  def title
    &quot;#{report_title} for #{start_date} to #{end_date}&quot;
  end

  def course_reports
    out = &quot;&quot;
    courses.each do |course|
      out += report_data_for_course(course)
    end
    out
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this is a lot of code. However, as you can see, it's all focused on
composing the information and exposing an interface that makes sense for
a report card. Using it is super easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;report = ReportCard.new(options)
puts report.student_name
puts report.title
puts report.course_reports
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bam! It's incredibly obvious. This code is much more clear than before.
We'll see if I'm still as hot on this pattern as I am now in a few
months, but I feel the extra object adds a significant amount of
clarity.&lt;/p&gt;

&lt;p&gt;If the model is too hard to create, or if additional clarity is needed,
documentation in the form of comments can also help to improve the
understanding of the 'other' audience. Comments can be a difficult form
of prose to write, because they need to be written at the correct level
of abstraction. If they simply repeat what the code does, they're
useless, and if they're too high-level, certain details and semantics
may not be made clear.&lt;/p&gt;

&lt;p&gt;Individual bits of code can also be made more clear by developing a
narrative within any particular method that's being written. Telling a
story with code may not be something you've considered before, but it's
really about maintaining a proper flow in the actions your code is
taking. For example, if there's a bunch of error handling strewn about
inside of a method, it's less clear than bunching all of the error
handling near the end. Most code should be an act in three parts: input,
processing, and output. If these three parts are mixed together, it can
appear much more complicated.&lt;/p&gt;

&lt;h3&gt;The forgotten audience: end-users&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;If I asked my customers what they wanted, they'd have told me, &quot;A
faster horse.&quot;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Henry Ford&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the end, all software is used by someone. Use-value is the driving
force of virtually all code. Code that doesn't do anything may be making
some kind of important philosophical statement, but isn't really the
sort that I'm talking about.&lt;/p&gt;

&lt;p&gt;The introduction of a user imposes significant restrictions upon the way
that code is composed. End-users do not need to understand the code
itself, but they do need to be able to understand its external
interfaces. These needs place an imposition on the way that the code
needs to be written, because it &lt;em&gt;must&lt;/em&gt; address this issue of interface.
Sometimes, interface requirements can create a burden on the internal
implementation. Needing to support certain behaviors and forms can
create complexity for an implementor.&lt;/p&gt;

&lt;p&gt;Documentation created for end users must be completely different than
that which is created for those inspecting the code itself. Most
end-users will not be literate in the arts of software development, and
so approach the software object in an entirely different way than those
who write code do. Yet, the same semantics must be passed on to them,
but at a higher level. There's a strong movement within the community to
start designing software with this kind of end-user documentation in
mind, called &lt;a href=&quot;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;README driven development&lt;/a&gt;.
There are advantages to thinking on this level when beginning, but a
nice effect of doing it first is that you can ensure it gets done. A
surprising amount of software has poor documentation for its users,
because it's created after the software is finished, and at that time
there's intense pressure to ship it out the door. Writing down
information for the end user first ensures that it's done properly, that
all development works in accordance with the documentation, and that all
of the use-cases for an end-user have been thought of and are being
addressed.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The next iteration of my blog</title>
   <link href="http://blog.steveklabnik.com/2011/05/12/the-next-iteration-of-my-blog.html"/>
   <updated>2011-05-12T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/05/12/the-next-iteration-of-my-blog</id>
   <content type="html">&lt;p&gt;Well well well, some things never change. Long ago, I hosted my own
blog, and here we are again. I've moved everything over to Jekyll, if
that means anything to you. You can now &lt;a href=&quot;https://github.com/steveklabnik/blog&quot;&gt;look at my blog on
GitHub&lt;/a&gt;. Big thanks to &lt;a href=&quot;http://www.jstorimer.com/2009/12/29/jekyll-on-heroku.html&quot;&gt;this
article&lt;/a&gt; for
lots of help and pointers with final deployment stuff, and &lt;a href=&quot;http://mikeferrier.ca/2011/04/29/blogging-with-jekyll-haml-sass-and-jammit/&quot;&gt;this one&lt;/a&gt; for haml and sass and stuff. Yay!&lt;/p&gt;

&lt;h2&gt;New-ish beginnings&lt;/h2&gt;

&lt;p&gt;So why'd I do this? Well, this is just part of moving more towards
hosting all of my own services, and not relying on services that others
provide. This isn't some sort of argument over individualism vs.
collectivism, it's more about &lt;a href=&quot;http://nomoresharecropping.org/&quot;&gt;No More Sharecropping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm still relying on people for hosting, of course. Nobody is 100%
removed, but with my own backup of everything, I'm in total control
here. It's really minimal work to keep this going, and only a few hours
of setup to move everything over.&lt;/p&gt;

&lt;h2&gt;A small change in focus, too&lt;/h2&gt;

&lt;p&gt;I'm also going to stop bitching about politics so often, and try to be
more constructive in general. I have a lot to say about this new
humanities angle that my life has taken as of late. Hence, I've changed
the title of my blog. And you can expect more posts along those lines.
More about books, more about art and code, less whining. One may think
I'm maturing or something...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Contributing to Ruby's Documentation</title>
   <link href="http://blog.steveklabnik.com/2011/05/10/contributing-to-ruby-s-documentation.html"/>
   <updated>2011-05-10T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/05/10/contributing-to-ruby-s-documentation</id>
   <content type="html">&lt;h3&gt;Update!&lt;/h3&gt;

&lt;p&gt;I'm now making it even easier than this: &lt;a href=&quot;/2011/08/22/im-making-it-dead-simple-to-contribute-to-ruby-s-documentation.html&quot;&gt;Read my new post about how
I'll do this for you&lt;/a&gt;. That said, if you want to do it yourself, the following will tell you how.&lt;/p&gt;

&lt;h3&gt;Original Article&lt;/h3&gt;

&lt;p&gt;Ruby 1.9.3 is coming out soon! &lt;a href=&quot;http://blog.segment7.net/2011/05/09/ruby-1-9-3-documentation-challenge&quot;&gt;drbrain has challenged the Ruby community to
improve its documentation&lt;/a&gt;, but some people were asking about how to do so.
So I made a video!&lt;/p&gt;

&lt;p&gt;Some small errata: drbrain has informed me that he should edit the Changelog,
not me. So don't do that. :)&lt;/p&gt;

&lt;iframe src=&quot;http://player.vimeo.com/video/23522731?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;400&quot; height=&quot;300&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;a href=&quot;http://vimeo.com/23522731&quot;&gt;How to contribute to Ruby's documentation.&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/steveklabnik&quot;&gt;Steve Klabnik&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;If you don't want to watch me talk about it, here's the same info, in text:&lt;/p&gt;

&lt;p&gt;Getting the Ruby source is pretty easy. You can find it on GitHub, here:
&lt;a href=&quot;http://github.com/ruby/ruby&quot;&gt;http://github.com/ruby/ruby&lt;/a&gt; . Click the &quot;fork&quot; button and clone down your
own fork:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:YOURUSERNAME/ruby.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that's done, type &lt;code&gt;cd ruby&lt;/code&gt; and add the main project as an upstream. This will
let you keep up-to-date with the latest changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add upstream https://github.com/ruby/ruby.git

$ git fetch upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay! Now that you're all set up, poke around and find something that needs
documented. I like to just look through the source, but you can also look
&lt;a href=&quot;http://segment7.net/projects/ruby/documentation_coverage.txt&quot;&gt;here&lt;/a&gt; for a list of things that have no docs. Documentation is written in
rdoc, and I'd check the recent commits that drbrain has been making to guide
you in style. &lt;a href=&quot;https://github.com/ruby/ruby/commit/071a678a156dde974d8e470b659c89cb02b07b3b&quot;&gt;This commit&lt;/a&gt;, for example, is a pretty good template. You
can also check out the formatting guides &lt;a href=&quot;http://rdoc.rubyforge.org/RDoc/Markup.html&quot;&gt;here&lt;/a&gt;. There's also &lt;a href=&quot;http://rdoc.rubyforge.org/RDoc/Parser/Ruby.html&quot;&gt;this&lt;/a&gt;
which explains some directives for .rb files and &lt;a href=&quot;http://rdoc.rubyforge.org/RDoc/Parser/C.html&quot;&gt;this&lt;/a&gt; which handles
directives for .c files.&lt;/p&gt;

&lt;p&gt;Now that you've made a change to the documentation, you can regenerate the
docs by using rdoc. First, grab the latest version from rubygems:&lt;/p&gt;

&lt;p&gt;   $ gem install rdoc&lt;/p&gt;

&lt;p&gt;Always best to have the latest tools. Now do this to generate the docs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rdoc --o tmpdoc lib/rss*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'm passing it in an output directory with op, since the doc directory is not
an rdoc directory. rdoc will complain and refuse to overwrite those files,
which is a good thing. I'm also passing in a pattern of what to compile
documentation for, compiling all of it takes a few minutes! In this case, I
chose to document the rss library.&lt;/p&gt;

&lt;p&gt;Now you have a website in rdocout. Open up its index.html, and poke around for
what you've changed. If it all looks good, you're ready to make a patch!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -r rdocout

$ git add .

$ git commit -m &quot;adding documentation for $SOMETHING&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you have two options here. One is to simply push the change up to GitHub,
and make a pull request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;... aaand pull request. The core Ruby development doesn't really happen on
GitHub though, and so your patch may take a while to get included. If you
really want to do it right, submit a patch to RedMine. We'll use git to make
this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git format-patch HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says &quot;make a patch out of the last commit.&quot; It'll tell you a file name,
it should start with 000.&lt;/p&gt;

&lt;p&gt;Now, sign up for the Ruby RedMine &lt;a href=&quot;http://redmine.ruby-lang.org/account/register&quot;&gt;here&lt;/a&gt;. Once you've clicked the
confirmation email, &lt;a href=&quot;http://redmine.ruby-lang.org/projects/ruby-19/issues/new&quot;&gt;open a new ticket&lt;/a&gt;, and assign it to Eric Hodel,
category DOC, and give it your Ruby version, even though it's not a big deal
here. Click 'choose file' and pick your patch, then 'create and continue' and
BAM! You're done!&lt;/p&gt;

&lt;p&gt;Let's all pitch in and make this the best documented Ruby release ever! In
writing documentation, you might even find some things that you'd like to help
improve. ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The first week of rstat.us: Users, Press, Scaling, oh my!</title>
   <link href="http://blog.steveklabnik.com/2011/03/30/the-first-week-of-rstat-us-users-press-scaling-oh-my.html"/>
   <updated>2011-03-30T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/03/30/the-first-week-of-rstat-us-users-press-scaling-oh-my</id>
   <content type="html">&lt;p&gt;Hey everyone. A lot of people have been asking me about &lt;a href=&quot;http://rstat.us&quot;&gt;rstat.us&lt;/a&gt; lately,
so I figured I'd tell a little bit of the story as it's gone down so far.&lt;/p&gt;

&lt;h2&gt;Stats&lt;/h2&gt;

&lt;p&gt;First, here's some numbers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users: 4553&lt;/li&gt;
&lt;li&gt;Uniques: 25,000&lt;/li&gt;
&lt;li&gt;Pageviews: 119,385&lt;/li&gt;
&lt;li&gt;Pages/visit: 4.77&lt;/li&gt;
&lt;li&gt;Statuses posted: 9387&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here's some fun info: stats on statuses by language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;german 118&lt;/li&gt;
&lt;li&gt;russian 1355&lt;/li&gt;
&lt;li&gt;none 97 &amp;lt;- ha!&lt;/li&gt;
&lt;li&gt;english 4836&lt;/li&gt;
&lt;li&gt;spanish 1412&lt;/li&gt;
&lt;li&gt;dutch 98&lt;/li&gt;
&lt;li&gt;french 1155&lt;/li&gt;
&lt;li&gt;portuguese 272&lt;/li&gt;
&lt;li&gt;farsi 66&lt;/li&gt;
&lt;li&gt;pinyin 1&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Code&lt;/h2&gt;

&lt;p&gt;Lines, by committer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;28 AndrewVos&lt;/li&gt;
&lt;li&gt;124 BRIMIL01&lt;/li&gt;
&lt;li&gt;6 Blaine Cook&lt;/li&gt;
&lt;li&gt;107 Brendan Taylor&lt;/li&gt;
&lt;li&gt;924 Brian Miller&lt;/li&gt;
&lt;li&gt;45 Caley Woods&lt;/li&gt;
&lt;li&gt;162 Carol Nichols&lt;/li&gt;
&lt;li&gt;20 Claudio Perez Gamayo&lt;/li&gt;
&lt;li&gt;1347 Dominic Dagradi&lt;/li&gt;
&lt;li&gt;4 James Larkby-Lahet&lt;/li&gt;
&lt;li&gt;99 Jorge H. Cuadrado&lt;/li&gt;
&lt;li&gt;258 Kat Hagan&lt;/li&gt;
&lt;li&gt;10 Lauren Voswinkel&lt;/li&gt;
&lt;li&gt;143 LindseyB&lt;/li&gt;
&lt;li&gt;16 MenTaLguY&lt;/li&gt;
&lt;li&gt;3 Michael Stevens&lt;/li&gt;
&lt;li&gt;3 Murilo Santana&lt;/li&gt;
&lt;li&gt;10 Nate Good&lt;/li&gt;
&lt;li&gt;1 Peter Aronoff&lt;/li&gt;
&lt;li&gt;24 Shebanian&lt;/li&gt;
&lt;li&gt;44 Stephen Paul Weber&lt;/li&gt;
&lt;li&gt;1409 Steve Klabnik&lt;/li&gt;
&lt;li&gt;8 Tony Arcieri&lt;/li&gt;
&lt;li&gt;478 Zachary Scott&lt;/li&gt;
&lt;li&gt;104 burningTyger&lt;/li&gt;
&lt;li&gt;28 james cook&lt;/li&gt;
&lt;li&gt;56 kat&lt;/li&gt;
&lt;li&gt;200 wilkie&lt;/li&gt;
&lt;li&gt;10 wolfwood&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also, wilkie has a lot more code in the 3 gems that we build off of, for our
ostatus implementation.&lt;/p&gt;

&lt;p&gt;That makes for 29 unique committers. These stats were generated by git-blame.&lt;/p&gt;

&lt;p&gt;Just over 200 pull requests&lt;/p&gt;

&lt;p&gt;872 commits&lt;/p&gt;

&lt;h2&gt;The deal with Heroku&lt;/h2&gt;

&lt;p&gt;Crazy! Such good stuff. I'm really excited as to how it's going, but there
were a few rocky points along the way as well. Some people saw me tweeting in
frustration with Heroku, so here's the skinny:&lt;/p&gt;

&lt;p&gt;On Sunday, for some reason, our 3 line app.js file, as well as our
favicon.ico, started to take 60 seconds to respond. This meant that a dyno was
getting tied up, and since Heroku changed the way their mesh works, they kept
routing requests to these screwed up dynos. This caused a rash of 500 errors,
and I frantically filed a support ticket. This was the first time I'd had a
paid app on Heroku, and they've always been fantastic. The Hackety Hack site
was on the free account, and performed beautifully, with similar traffic.&lt;/p&gt;

&lt;p&gt;What it boils down to is this, though: Heroku took about 22 hours to respond
to my support ticket, in any way. Not like &quot;we're looking at it, but it's
Sunday, so it'll take a while.&quot; Crickets. Meanwhile, the errors kept
happening. Eventually, I heard something from them, where they pretty much
said 'I see other errors, try fixing those.' with no response on the actual
root cause. I got an email from a Level2 person who promised to investigate
and escalate, but by now, I still haven't heard.&lt;/p&gt;

&lt;p&gt;I also had a smaller issue with MongoHQ. To their credit, I heard back Sunday
night, and the issue with them was an annoyance, not a showstopper. I ended up
hearing from the CEO, who ended up following up with me multiple times, and in
a pretty timely fashion.&lt;/p&gt;

&lt;p&gt;So, we moved our hosting away from Heroku and onto Duostack. Now, full
disclosure: I'm friends with the guys from DuoStack. That said, they took care
of me. I found a small bug in their platform when deploying the app, but
everything's gone really well. Bunches of users have commented on how fast the
site is now, and I've been really happy with it so far. We'll see how it goes.&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;Anyway, here's what's next for &lt;a href=&quot;http://rstat.us&quot;&gt;rstat.us&lt;/a&gt;: The biggest thing is getting to
100% ostatus compliance. We spent lots of time this week getting screwed over
by a bug in Google's hub implementation, but now that it's all taken care of
now. While we work on that, we're also getting ready to deploy a statusnet
compliant API, so people can use statusnet clients on mobile and desktop. This
is huge for me, as I'm really missing notifications.&lt;/p&gt;

&lt;p&gt;Other than that, just keep using it! Tell your friends! If you code, come join
us on the IRC (#rstatus on freenode), and help file bugs and patch them!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Announcing rstat.us</title>
   <link href="http://blog.steveklabnik.com/2011/03/23/announcing-rstat-us.html"/>
   <updated>2011-03-23T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/03/23/announcing-rstat-us</id>
   <content type="html">&lt;p&gt;Whew.&lt;/p&gt;

&lt;p&gt;If you've been &lt;a href=&quot;http://twitter.com/steveklabnik&quot;&gt;following me on Twitter&lt;/a&gt; at all lately, you'll know that
I've been working hard on a new project lately. Tonight, even though it's
late, I'm finally getting it out there. Please welcome &lt;a href=&quot;http://rstat.us/&quot;&gt;http://rstat.us/&lt;/a&gt;
to the world! (as soon as the DNS updates. ;) )&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rstat.us&quot;&gt;rstat.us&lt;/a&gt; is a micro-blogging service, just like Twitter. There's one big
difference, though: it is distributed. Oh, and it's 100% open source. So two
things. It's also integrated with Facebook and Twitter, so you can just log in
with either of those accounts, and it'll syndicate your posts. Well, just to
Twitter right now, but we're getting there.&lt;/p&gt;

&lt;p&gt;Here's the other cool thing: Want to own your data? You can actually &lt;a href=&quot;http://github.com/hotsh/rstat.us&quot;&gt;get the
code&lt;/a&gt; and run a copy yourself! But you won't get left out: you can follow
anyone else that uses the &lt;a href=&quot;http://ostatus.org/&quot;&gt;ostatus&lt;/a&gt; protocol, like &lt;a href=&quot;http://identi.ca/&quot;&gt;http://identi.ca/&lt;/a&gt;,
and it'll Just Work. You just have to grab the URL to their feed, put it in,
and it's all good! But you probably shouldn't do that yet. We're still working
on some features.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rstat.us&quot;&gt;rstat.us&lt;/a&gt; is still very much alpha quality. 7 or 8 of my best friends and
I have been fighting off sleep, food, and tests for the last two weeks to put
this together. Please &lt;a href=&quot;http://rstat.us/&quot;&gt;give it a try&lt;/a&gt; and let me know what you think, tell
me if you can break it, or anything else that's particularly interesting. If
you're the coding type, please check out the &lt;a href=&quot;http://github.com/hotsh/rstat.us/wiki&quot;&gt;wiki&lt;/a&gt; for a big old list of
stuff we'd like to do.&lt;/p&gt;

&lt;p&gt;Oh, and of course, you should &lt;a href=&quot;http://rstat.us/users/steveklabnik&quot;&gt;follow me on rstat.us&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Did you hear? I'm Ruby Mendicant University's first Visiting Teacher</title>
   <link href="http://blog.steveklabnik.com/2011/03/18/did-you-hear-i-m-ruby-mendicant-university-s-first-visiting-teacher.html"/>
   <updated>2011-03-18T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2011/03/18/did-you-hear-i-m-ruby-mendicant-university-s-first-visiting-teacher</id>
   <content type="html">&lt;p&gt;I've heard &lt;a href=&quot;http://university.rubymendicant.com/&quot;&gt;Ruby Mendicant University&lt;/a&gt; (also known as RMU, not to confuse
you Robert Morris alums!) described as &quot;the best kept secret of the Ruby
community.&quot; High praise, indeed. If you haven't heard about RMU before, check
out this presentation by Andrew Cox: &lt;/p&gt;

&lt;p&gt;TL;DR: RMU is a free, online 'unversity' from Gregory Brown, author of 'Ruby
Best Practices.' You enter an intermediate Rubyist, and you exit an expert. &lt;/p&gt;

&lt;p&gt;Anyway, RMU recently announced that &lt;a href=&quot;http://university.rubymendicant.com/changelog/visiting-teacher-2011-t2-steve-klabnik&quot;&gt;I'll be their first visiting teacher&lt;/a&gt;.
Basically, I'll be hanging out, giving advice, and just generally being even
more accessible to RMU students than I already am. Greg and I have talked a
lot about education, Ruby, and a lot of other things... between Hackety's
'nothing to intermediate' and RMU's 'intermediate to expert' approaches to
learning, anyone wanting to get up to speed with Ruby should have no shortage
of resources at their disposal.&lt;/p&gt;

&lt;p&gt;If you're feeling like you've got the hang of Ruby, but want to take it to the
next level, &lt;a href=&quot;http://university.rubymendicant.com/admissions&quot;&gt;applications are open&lt;/a&gt;! Hopefully I'll see you there.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I'm quitting Hacker News</title>
   <link href="http://blog.steveklabnik.com/2011/03/03/i-m-quitting-hacker-news.html"/>
   <updated>2011-03-03T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2011/03/03/i-m-quitting-hacker-news</id>
   <content type="html">&lt;p&gt;I've been thinking about this post for a while.&lt;/p&gt;

&lt;p&gt;I freaking love Hacker News. It's my favorite place on the Internet. It's
incredibly valuable. I have learned so much from my time there.  With that
said, I feel like it's taken up too much of my time.&lt;/p&gt;

&lt;p&gt;I'm trying to accomplish things. I got accepted to grad school. I'm trying to
rebuild Shoes. I'm working on improving Hackety. I'm finding that I don't have
enough hours in the day to accomplish the things I want to accomplish. And
arguing for the hundredth time about how artists will survive in a post-IP
world, or how to get your first couple of users, or whatever it is that Google
or Apple did this week hasn't gotten boring yet, and that's a problem.&lt;/p&gt;

&lt;p&gt;The only respectable solution is to go cold-turkey for a while.&lt;/p&gt;

&lt;p&gt;I've been doing good on some of my new years' resolutions, and bad on others.
I haven't spent a lot of time writing lately, and I have only been doing okay
at my writing. Hacker News is cutting into that. I feel like I'm using it in
the same way some use TV. Yeah, it's significantly deeper, but I really should
be reading more books and less HN. At least, that's what's right for me right
now.&lt;/p&gt;

&lt;p&gt;I won't be gone forever. I just need to spend more time elsewhere.&lt;/p&gt;

&lt;p&gt;With that said, I've been spending a &lt;em&gt;lot&lt;/em&gt; of time on Shoes. I'll just leave
this here: &lt;a href=&quot;https://github.com/shoes/shoes/tree/feature/gemify&quot;&gt;https://github.com/shoes/shoes/tree/feature/gemify&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A few Notes on Foucault</title>
   <link href="http://blog.steveklabnik.com/2011/01/22/a-few-notes-on-foucault.html"/>
   <updated>2011-01-22T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2011/01/22/a-few-notes-on-foucault</id>
   <content type="html">&lt;p&gt;I've almost always been in a habit of reading. When I was younger, I spent a
lot of time in the library. I'd just grab an entire series of novels, and read
them all, right in a row. Sometimes I'd end up reading non-fiction too. I
ended up with a lot of books on software.&lt;/p&gt;

&lt;p&gt;Then my local library got Internet access. Slowly, I started to spend less
time in the stacks and more in front of a terminal. This wasn't a bad thing; I
still kept reading. What's more, what was previously a one way street turned
into two: I didn't just read the Internet, I wrote it. I spent hours and hours
discussing the things I'd read with others.&lt;/p&gt;

&lt;p&gt;In any case, as the years flew by, the things that I've been reading have
become less and less substantial. Current events are fine and all, and
pictures of cute cats are nice, but I feel like the volume of what I've been
reading has gone up, but the quality has gone down. It happens. I can't really
be snide about not owning a TV while being subscribed to
&lt;a href=&quot;http://www.reddit.com/r/fffffffuuuuuuuuuuuu&quot;&gt;/r/fffffffuuuuuuuuuuuu&lt;/a&gt;. Reddit somehow has morphed into a place where you
can feel superior, but it's really just the same exact thing in different
clothing. Combine this general unease with my aspirations for grad school in
the fall, as well as my renewed interest in political philosophy, and my need
to hit the books has become readily apparent.&lt;/p&gt;

&lt;p&gt;Luckily, I have an ally in this quest, and Jamie has given me a reading list.
Since reading and writing are two sides of a single coin, I'll be writing
about the things that I read here. Like many other things I've written about
in the past, I'm sure that putting my thoughts down on paper (?) will help to
gel my understanding and thoughts. First up: Michel Foucault's &quot;Discipline and
Punish.&quot;&lt;/p&gt;

&lt;p&gt;I'll get right to it: I really enjoyed reading this book. It's partially
because it took a lot of random things that I kind of knew and tied them to
some experiences that I've had in a meaningful way. It's also partially
because I have a substantial infatuation with the conspiratorial; I re-read
&quot;1984&quot; every year, and I often think about its all-knowing, all-seeing
telescreen imagery when discussing anything vaguely political. &quot;Discipline and
Punish&quot; gave me the same sort of images, but they were fewer, and more firmly
rooted in history and reality. The book opens with a section named &quot;Torture,&quot;
and the scene of Robert-François Damiens' punishments for attempted regicide.
I'm sure that before the release of &quot;Saw,&quot; these images were even more
shocking:&lt;/p&gt;

&lt;p&gt;  ... he was to be 'taken and conveyed in a cart, wearing nothing but a shirt, holding a torch of burningwax weighing two pounds'; then, 'in the said cart, to the Place de Greve, where, on a scaffold that will be erected there, the flesh will be torn from his breasts, arms, thighs, and calves with red-hot pincers, his right hand, holding the knife with which he committed the said parricide, burnt with sulphur, and, on those places where the flesh will be torn away, poured molten lead, boiling oil, burning resin, wax, and sulphur melted together and then his body drawn and quartered by four horses and his limbs and body consumed by fire, reduced to ashes, and his ashes thrown to the winds.&lt;/p&gt;

&lt;p&gt;Let it never be said that the people of 1757 were not thorough. Regardless, by
January of 1840, we'd transitioned to a prison system that looks pretty much
the same as it does now. The book's primary theme is discussing how we got
from point A to point B, and then examining the 'why' to explain how modern
society has a new sovereign institution: the 'carceral system.'&lt;/p&gt;

&lt;p&gt;Before we can examine that question, though, we need to ask why we used
torture as a form of punishment in the first place. The reasoning is actually
straightforward: during the period of monarchy, everything revolves around the
monarch. He is sovereign in a more absolute way than we even initially think
of; the pop-culture image of a king has more to do with something of a
popularity contest or that he's simply the guy on the top of the pyramid, but
the nature of a monarch's power runs more deeply than that. It was called
'divine right' for a reason, the physical body of the sovereign was the
representation of God himself, and since the entire world belongs to God, thus
it belongs to and is a part of the monarch. It reminds me of the kind of
doublethink necessary to grasp the Catholic conception of the Holy Trinity, in
this case God the Father, the king his son, and the world rather than a Holy
Ghost. All one, yet three at the same time. In any case, if the land itself is
the literal body of the king, then any transgression is an act of defiance not
only of the rule of the monarch, but is making war upon God himself. And since
damage has been done to the body of God, so must an equivalent exchange be
made with the body of the aggressor. Torture also has an element of the
theatrical to it, and therefore demonstrates to all of those watching that
they must also comply with the rule of law or face the consequences.&lt;/p&gt;

&lt;p&gt;However, eventually, torture became socially inconvenient. Basically, it was a
case of the Streisand Effect: when you place that much attention on someone,
you create a forum for sympathizers to create romantic images of their fallen
hero. There's a great historical example of this in the Christian mythos:
consider the polarizing effect that Christ's torture on the cross maintains to
this day. History is littered with the songs of fallen heros, and a call to
follow in their stead. Eventually, whenever a new convict was to be strung up
at a gallows, there'd be a state of disarray. Foucault describes several
images of rioters throwing stones and even in some cases killing the
executioner.&lt;/p&gt;

&lt;p&gt;As a result of this, the nature of punishment slowly changed. Reformists
argued that punishment was metered out unevenly, and inconsistently. Thus in
the same way that monarchy gave way to democracy, the absolute right of the
king to punish became distributed as well. However, centralized and
distributed systems are quite different, and require different constructs to
operate properly. Therefore, a distributed form of the right to punish would
need some mechanism by which to operate. This mechanism is termed &quot;discipline&quot;
by Foucault. Discipline creates a certain order all by itself, and he uses a
great example of monks and monasteries to illustrate the concept of
discipline. Think about all of these things that we consider virtuous:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Studying is a disciplined form of reading&lt;/li&gt;
&lt;li&gt;Dieting is discipline applied to eating&lt;/li&gt;
&lt;li&gt;The image of a soldier is almost entirely one of discipline&lt;/li&gt;
&lt;li&gt;Morality is discipline applied to all of life&lt;/li&gt;
&lt;li&gt;Exercise is disciplined form of the body&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But discipline has even greater roots in our society. Think about Taylor's
Scientific Management, for example: it's a means of imposing discipline on
workers to maximize their production. Schooling is a way of giving children a
'structured environment' (structure seems to be synonymous with discipline in
many cases) to develop in. Churches are places for the soul to become
disciplined.&lt;/p&gt;

&lt;p&gt;Submitting to discipline has deeper psychological effects as well. It creates
the idea of a division: there's those who follow the rules, and those that
disregard them. And since we've established that those who follow the rules
are virtuous, those who don't must not be. Since those that don't follow the
rules are doing bad things, they should be subject to punishment, so that they
can remain disciplined. And thus the system of rules can be used as the
distributed form of this right to punish, replacing the absolute right of the
monarch. Submitting to this mentality makes people into 'docile bodies' that
perfectly fit into this worldview.&lt;/p&gt;

&lt;p&gt;As an example of how far this disciplinary approach has gone, Foucault
presents the Panopticon, which was a prison shaped like a pie, with a tower in
the middle. Prisoners would be able to observe others directly across from
themselves, and the guard who may or may not be in the tower would be able to
watch all of the prisoners at once. Since you couldn't tell if the guard was
in the tower or not, discipline would become internalized, since you always
had to assume that Big Brother is watching you... This way of thinking about
society ends up creating an all-encompassing 'carceral system' that we now
live in.&lt;/p&gt;

&lt;p&gt;It's also important to note that this carceral system is total and absolutely
permeating every aspect of society, yet they aren't presented as such.
Foucault specifically mentions that it's important to consider that the
delinquent are still a part of the system, and not outside of it. Yet we're
constantly presented with images that serve to present the idea that there's a
'criminal underworld,' that those who lead a life of crime are part of a
shadowy alternate universe. Foucault refers to this idea as 'enclosure':
&quot;Discipline sometimes requires enclosure, the specification of a place
heterogeneous to all others and closed in upon itself. It is the protected
space of disciplinary monotony.&quot; The enclosure embodies this separation, since
there's a space both within and outside of the enclosure. A self and an Other.&lt;/p&gt;

&lt;p&gt;... so yeah. That's my summary. I'm still digesting a lot of this stuff, and
so I may have more to say about it later.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Goals for 2011</title>
   <link href="http://blog.steveklabnik.com/2011/01/02/goals-for-2011.html"/>
   <updated>2011-01-02T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2011/01/02/goals-for-2011</id>
   <content type="html">&lt;p&gt;This year I'm happy to report that I have much more upbeat plans than last
year's kind of sad post. With that said, here's my 2011 goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I want to work for other people 2 days per week on average for the year.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to write something every day&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to keep building on the initial success that Hackety Hack's 1.0 launch
has brought. I'd like to get a new release out every month or so, with a 2.0 for
Christmas 2011.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to start exercising again. My current lifestyle is still too sedentary
for my liking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to eat better.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to start logging my activities every day.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Most of these are kinda standard. I used to go to the gym all the time, but
I've never eaten healthily. Both of these things are going to become more
important as I age, however, and so I'm starting to actually give them serious
consideration.&lt;/p&gt;

&lt;p&gt;Hackety Hack had an impressive 1.0 launch, but I have lots of work to do.
Please check out the &lt;a href=&quot;http://blog.hackety-hack.com/&quot;&gt;Hackety Hack blog&lt;/a&gt; tomorrow for a report on that.
Basically, I now have a sizable userbase to attend to, and they've found a
bunch of bugs that I need to iron out before starting to build more stuff.&lt;/p&gt;

&lt;p&gt;The logging is an idea that I got from &lt;a href=&quot;http://www.sebastianmarshall.com/&quot;&gt;Sebastian Marshall&lt;/a&gt;. We've had some
good conversation recently, and we talked briefly about the importance of
measuring things. You can only improve things if you know what's actually
wrong... I'm going to be tracking the time that I do various activities, and
seeing if I can improve. If I feel this is working, I'll write about it in a
month or so.&lt;/p&gt;

&lt;p&gt;I've already made some progress on all of these, actually. Obviously, most of
them can only truly be realized in a year's time, but here's what I've got
going:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I've got my logging set up going. I'm trying to figure out how to make it as
unobtrusive as possible, but I think I have a good first run at it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I've got a set up for the work situation, and if all goes well, that should
be accomplished. I originally thought I'd have to front-load a bit, but it
seems like I'll be doing this most of the year.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working that little will enable me to really accomplish my Hackety goals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that Maria is graduated, she's got some time to cook things, and she's
also interested in eating better, and her habits are better than mine already.
Hopefully this will lead to success.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logging should help keep my eyes on the prize for my exercise and writing goals.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, that's it! Good luck with your goals in the new year!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hackety Hack v1.0</title>
   <link href="http://blog.steveklabnik.com/2010/12/25/hackety-hack-v1-0.html"/>
   <updated>2010-12-25T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/12/25/hackety-hack-v1-0</id>
   <content type="html">&lt;p&gt;It's been a long journey. I have a lot to say about this, but it'll have to
wait until I'm not in the middle of nowhere spending some time with Maria's
family. I just wanted to tell you all Merry Christmas, and point you at the
&lt;a href=&quot;http://blog.hackety-hack.com/post/2457961910/merry-christmas-and-a-1-0-announcement&quot;&gt;Hackety Hack v1.0 release announcement&lt;/a&gt; and the new
&lt;a href=&quot;http://hackety-hack.com/&quot;&gt;Hackety Hack website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Merry Christmas!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The hardest decision I've ever made.</title>
   <link href="http://blog.steveklabnik.com/2010/11/17/the-hardest-decision-i-ve-ever-made.html"/>
   <updated>2010-11-17T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/11/17/the-hardest-decision-i-ve-ever-made</id>
   <content type="html">&lt;p&gt;I'll cut to the chase: I've stepped down as CTO of CloudFab. I don't
want to discuss details, but life is too short to not be doing what
you want with it. And, after a period of careful thought and
consideration, it's no longer the right thing for me. It was an
amicable parting, and my replacements are already in place, and doing
cool things. I'm happy with what I've accomplished, but it's time  for me to
move on.&lt;/p&gt;

&lt;p&gt;This raises the question: what am I moving on to? Here's the answer:
Hackety Hack. What I truly care about is teaching, writing, and
discussing software. If I could do anything, I'd hack on Hackety,
share what I know with others, and keep learning and playing with new
things all day long.&lt;/p&gt;

&lt;p&gt;However, there's a certain question of sustainability here: I'm not
made of money, and I have lots of bills to pay. However, doing the
'obvious' thing would be really, truly wrong: Hackety Hack is not and
will never be a startup. It's a social venture, if anything: it would
be absolutely unquestioningly wrong for me to ever ask anyone for a
single cent for it. It'd also be counterproductive: how could I share
programming with everyone if I excluded those without disposable
income?&lt;/p&gt;

&lt;p&gt;So to this end, Hackety cannot be all that I do. And while I really
want to teach, I also have a lot to learn. Luckily, I have some great
allies in this area: I've been working alongside two teachers at the
University of Pittsburgh over the past month or so: one in the English
department, and one in the Computer Science department. In doing so,
I've come to realize that my place in life is actually in the middle:
while I love the theoretical side of CS, I'm actually much more
interested in the application. And teachers need to be effective
communicators, so investing in writing is absolutely worthwhile for
me. At the same time, I've really enjoyed every chance I've had to
write: there's a reason I keep three blogs now! I'm also incredibly
interested in the parallels that exist between computer and human
languages. I like the comparison between refactoring and composition.
I think the two fields have a lot to learn from one another. It's
something I'd like to explore more.&lt;/p&gt;

&lt;p&gt;To do so, I'll have to finish off my undergrad degree. Luckily, I'm
very close, so I'll be doing that in the spring. Afterward, it's my
intention to go to grad school in the English department, so I'm
furiously working on my application, with the help of the
aforementioned teacher. At the same time, I'll possibly help teach or
TA classes in the CS department as well. I'm hoping to combine my
solid foundations in the hard sciences with the new perspective and
improved analysis that the humanities can offer.&lt;/p&gt;

&lt;p&gt;I don't think that academia is where I want to stay forever, but I
think it's a good place for me to grow for now. It's time for me to
invest in myself a little. I think I'll end up a much better person in
the end.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Trolling is a art</title>
   <link href="http://blog.steveklabnik.com/2010/09/24/trolling-is-a-art.html"/>
   <updated>2010-09-24T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/09/24/trolling-is-a-art</id>
   <content type="html">&lt;p&gt;I find it incredibly hard not to be judgmental.&lt;/p&gt;

&lt;p&gt;I'm not sure what part of my personality makes this happen, but even
when I try to curb tearing down other people, I end up doing it
anyway. I'm not sure if it's just me, but I think part of the problem
is that these kinds of things are rewarded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/stevesajerk.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is me, being a jerk.&lt;/p&gt;

&lt;p&gt;One of the reasons that I use my real name everywhere is to try to
improve the civility of my discourse. When you're anonymous, it's
really easy to be callous. And when I used a handle, I was even worse.
But even now, I can think of three times when I accidentally was mean
for basically no reason: That tweet, the Diaspora incident, and the
only Hacker News comment I've ever deleted.&lt;/p&gt;

&lt;p&gt;In all three of these instances, it's not so much that I was wrong.
It's that I ended up presenting my criticisms poorly. I think I did a
decent job with the Diaspora one, but people still took it the wrong
way, so I failed to communicate. I'm certainly not infallible. I
guarantee you there are n00b errors and security holes in my own
codebases. So I really shouldn't be so quick to judge.
That's all I have to say about that. I'll just have to do better going
forward.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>80% of success is showing up</title>
   <link href="http://blog.steveklabnik.com/2010/09/21/80-of-success-is-showing-up.html"/>
   <updated>2010-09-21T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/09/21/80-of-success-is-showing-up</id>
   <content type="html">&lt;p&gt;It's funny how true this quote is.&lt;/p&gt;

&lt;p&gt;There are three people that I really admire: &lt;em&gt;why, Zed Shaw, and Yehuda Katz.
And to simplify my tenses a bit, I'll speak of &lt;/em&gt;why in the present tense. What
do these three guys have in common? They all churn out badass software like
nobody's business. _why started so many projects that it just adds to his
mythical qualities; Zed has been cranking out software and blogs left and
right, and Yehuda's &quot;&lt;a href=&quot;http://yehudakatz.com/2010/09/14/heres-to-the-next-3-years/&quot;&gt;I'm quitting Engine Yard&lt;/a&gt;&quot; post basically said &quot;I'm
pretty much done rebuilding the server side of software in my own image, now
it's time for me to focus on the client side of the equation.&quot; Not with that
much hubris, of course, but it's pretty much true.&lt;/p&gt;

&lt;p&gt;Now, I don't mean to imply that they've 'just shown up,' but it seems to me
that productivity is directly related to just getting started on things. I've
had people tell me that they think I'm superhumanly productive, which is funny
to me: I'm almost constantly fretting about how much time I waste every day.
And while I do have a ton of projects, unlike all those guys, I tend to not
fully finish them. It's something that I've been trying to work on lately,
because I have so many things that I want to accomplish.&lt;/p&gt;

&lt;p&gt;For me, the biggest hold on cranking out even more stuff is just simply
starting to work. Often, if i slack off for half an hour, I slack off all
evening. Now that there's a TV with Netflix in my house again, it's difficult
to not watch all of the amazing documentaries that are on there. But if I
manage to start working on stuff, I find that I keep doing it. It's like I get
to pick one or the other: projects or slacking. I can't quite seem to do both.
And so I've been starting some minor experimentation to see if I can't work on
projects more often than not.&lt;/p&gt;

&lt;p&gt;One thing that I've sort of half-tried is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro Technique&lt;/a&gt;. It's
pretty sweet: basically, you set a timer for 25 minutes, and start working.
You can take a break when it goes off. Surely you can wait to refresh Hacker
News for 25 minutes, right? That's something else I've done: on Friday, I put
Reddit and HN in my /etc/hosts file. They're totally blocked, for now. After
&lt;a href=&quot;http://blog.steveklabnik.com/trouble-with-diaspora&quot;&gt;last week's situation&lt;/a&gt;, I spent waaaay too much freaking time on HN, even
for me. I love it, and I'm learning a ton every day, but it's becoming an
issue for my productivity. So it's gone for a bit. It's been rough, but I've
been getting lots done, and I think when I start reading it again, I'll be
able to keep it at reasonable levels.&lt;/p&gt;

&lt;p&gt;Anyway, so that's what I'm doing to keep productive. Anyone else have any
thoughts on this? How do you keep working on side projects? What works for
you?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Trouble with Diaspora</title>
   <link href="http://blog.steveklabnik.com/2010/09/17/trouble-with-diaspora.html"/>
   <updated>2010-09-17T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/09/17/trouble-with-diaspora</id>
   <content type="html">&lt;p&gt;So, Wednesday, Diaspora was released.&lt;/p&gt;

&lt;p&gt;If you're not familiar, a few months ago everyone was up in arms about the
latest Facebook privacy change. So four college kids started &lt;a href=&quot;http://www.kickstarter.com/projects/196017994/diaspora-the-personally-controlled-do-it-all-distr&quot;&gt;a Kickstarter
project&lt;/a&gt; with a dream: let's make a distributed, private Facebook. They
asked for $10,000. They got about $200,000.&lt;/p&gt;

&lt;p&gt;They worked on the code all summer, in secret. Wednesday, a 'developer
preview' came out. They'd promised something by the end of the summer, and the
15th of September is the last day. So &lt;a href=&quot;http://github.com/diaspora/diaspora&quot;&gt;they put it up on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh boy.&lt;/p&gt;

&lt;p&gt;Basically, the code is really, really bad. I don't mean to rain on anyone's
parade, but &lt;a href=&quot;http://www.theregister.co.uk/2010/09/16/diaspora_pre_alpha_landmines/&quot;&gt;there are really, really bad security holes&lt;/a&gt;. And they're
there due to things that any professional programmer would never dream of
leaving out of their code. I don't want to disclose too many details, but you
can see the code yourself on GitHub.&lt;/p&gt;

&lt;p&gt;At first, I found one. So I tried to patch it. And I did, and it got accepted
into master. Awesome. But then, the more I read, the more bad things I found.
They're going to need a complete overhaul to fix this. Go over every last
piece of code. And don't even get me started on their encryption code.&lt;/p&gt;

&lt;p&gt;But basically, please heed their own warning from &lt;a href=&quot;http://www.joindiaspora.com/2010/09/15/developer-release.html&quot;&gt;the announcement&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Feel free to try to get it running on your machines and use it, but we give
no guarantees. We know there are security holes and bugs, and your data is not
yet fully exportable. If you do find something, be sure to log it in our
bugtracker, and we would love screenshots and browser info.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you find one of the many, many nodes that people are publicly posting,
please don't use your real passwords, or information.&lt;/p&gt;

&lt;p&gt;And if you're a developer, consider helping out. It's going to be rough going:
the mailing list and issue trackers are full of people that have no idea what
they're doing. Be prepared to wade through tons of crap. But they could
really, really use the help. I'll be submitting another patch or two, but it
needs much, much more than I can give.&lt;/p&gt;

&lt;p&gt;EDIT: Please check out &lt;a href=&quot;http://blog.steveklabnik.com/this-is-why-new-media-hates-old-media&quot;&gt;my follow up post&lt;/a&gt;, where I talk about being
misquoted regarding this post.&lt;/p&gt;

&lt;p&gt;EDIT 2: Patrick has a post up describing the exploits, now that there have
been some patches applied. If you're a technically inclined individual, you
might be interested. You can find it on &lt;a href=&quot;http://www.kalzumeus.com/2010/09/22/security-lessons-learned-from-the-diaspora-launch/&quot;&gt;his blog&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A word about why, whyday, and Hackety Hack</title>
   <link href="http://blog.steveklabnik.com/2010/08/19/a-word-about-why-whyday-and-hackety-hack.html"/>
   <updated>2010-08-19T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/08/19/a-word-about-why-whyday-and-hackety-hack</id>
   <content type="html">&lt;p&gt;Today is Whyday. A programmer's holiday. Today is the day that we
don't forget that programming isn't all Agile and driven by behavior
and Serious Business. Inside each cubicle, the hacker spirit is trying
to burst free. Today, it will.&lt;/p&gt;

&lt;p&gt;Today, I'm also releasing a prerelease version of Hackety Hack 1.0.
It's been a long time coming. The announcement of Whyday got me
thinking about the past year of a world without _why, and the 'your
domain is about to expire' notices got me thinking about how I've now
been the head of the Hackety Hack project for almost 12 months, too. I
don't like thinking about this, because I almost let _why down.&lt;/p&gt;

&lt;p&gt;I never met _why. I can't really claim to know him, or know what his
intentions were, but I think about him a lot. '_why' the persona,
really embodies everything that I love about software. The world owes
_why a great debt, and I'd like to think that I'm doing what I can to
repay him.&lt;/p&gt;

&lt;p&gt;At least, I am now. I don't like to think about roughly 6 or 8 months
of the last year of Hackety Hack; I did an exceptionally poor job of
being a steward. Being alone, having no help, and having a bit of an
identity crisis is an excuse; you can decide if it's a good or poor
one. But things have been looking up, and we've got some momentum, I
owe a great debt to Fela for helping make this summer happen.&lt;/p&gt;

&lt;p&gt;I really do feel that the Little Coder still has a predicament, and
I'm almost to the point where they can find some solace. I still feel
that Hackety Hack could become an absolutely invauable project, I've
just got to keep going. I can, I will, and I am. But I wouldn't be
able to if so many people didn't care, say a nice world, or lend a
hand.&lt;/p&gt;

&lt;p&gt;So thanks. And as ashbb would say, &quot;Let's all have fun with Hackety Hack!&quot;&lt;/p&gt;

&lt;p&gt;Happy Whyday.&lt;/p&gt;

&lt;p&gt;EDIT: The release is now out. See the announcement &lt;a href=&quot;http://hackety-hack.com/posts/happy_whyday&quot;&gt;here&lt;/a&gt;, and get it
&lt;a href=&quot;http://hackety-hack.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A blip in time</title>
   <link href="http://blog.steveklabnik.com/2010/07/24/a-blip-in-time.html"/>
   <updated>2010-07-24T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/07/24/a-blip-in-time</id>
   <content type="html">&lt;p&gt;Sometimes, insight comes from very unlikely places.&lt;/p&gt;

&lt;p&gt;I'm keenly interested in the music industry, and how it will evolve, or
possibly die. I care deeply about music; it's had a profound effect on my life
over the years. Even though the entire industry has been screaming that
they're dying, I truly believe that music will never die. It's bigger than
money. I'm not exactly sure about the details, even though I have some ideas.&lt;/p&gt;

&lt;p&gt;In any case, I was reading about this the other day, and I came across &lt;a href=&quot;http://sometimesright.com/2010/05/sir-mick-on-music-profits/&quot;&gt;this
quote from Mick Jaggar&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But I have a take on that – people only made money out of records for a
very, very small time. When The Rolling Stones started out, we didn’t make any
money out of records because record companies wouldn’t pay you! They didn’t
pay anyone!&lt;/p&gt;

&lt;p&gt;Then, there was a small period from 1970 to 1997, where people did get paid,
and they got paid very handsomely and everyone made money. But now that period
has gone.&lt;/p&gt;

&lt;p&gt;So if you look at the history of recorded music from 1900 to now, there was
a 25 year period where artists did very well, but the rest of the time they
didn’t.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;An interesting bit of history, and an interesting perspective from someone who
has some skin in the game, to say the least. But it's the last sentence of
that blog post that gives the true insight:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Don’t stop at 1900, though. If you think of the entire history of the world,
the notion that you could make an outsized return on making music is a
complete aberration.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When I first read this sentence, something clicked inside my head, and I had a
realization: does this apply to everything?&lt;/p&gt;

&lt;p&gt;We always think that we're moving forward. It's called 'progress' for a
reason. But it's kind of obvious why we'd think this: we're the ones living
it! Of course we'd do know wrong!&lt;/p&gt;

&lt;p&gt;But what if we are?&lt;/p&gt;

&lt;p&gt;What if we're not progressing, but regressing? What if the latest and greatest
isn't where things are going... it's just a small blip in the graph?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe we're actually going down the wrong path, building towards deflation,
and need to turn around and revise our position. Maybe we've misstepped. What
if we're doing what we think is right, but it's actually wrong? What if we're
just on the upswing of some local minima?&lt;/p&gt;

&lt;p&gt;I don't necessarily mean that, for example, the music industry will cause the
total collapse of everything. But maybe it was a temporary peak. Things will
return back to some even level again, and over the grand sum of history, such
a small deviation will be forgotten.&lt;/p&gt;

&lt;p&gt;Then I start to apply this line of reasoning to everything. How can we really
know if we're doing better than yesterday?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What To Know Before Debating Type Systems</title>
   <link href="http://blog.steveklabnik.com/2010/07/17/what-to-know-before-debating-type-systems.html"/>
   <updated>2010-07-17T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/07/17/what-to-know-before-debating-type-systems</id>
   <content type="html">&lt;p&gt;Recently, it was brought up on Proggit that Chris Smith's &quot;What to Know Before
Debating Type Systems&quot; was no longer online. This is a really great article,
and in an effort to make sure it survives, I've grabbed the &lt;a href=&quot;http://web.archive.org/web/20080822101209/http://www.pphsg.org/cdsmith/types.html&quot;&gt;archive.org
cache&lt;/a&gt; and am 'reprinting' it here. If you're into programming languages,
read this and level up!&lt;/p&gt;

&lt;p&gt;EDIT: Chris has placed it back online. You can find it &lt;a href=&quot;http://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Without further ado, &quot;What to Know Before Debating Type Systems&quot;:&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;What To Know Before Debating Type Systems&lt;/h3&gt;

&lt;p&gt;I would be willing to place a bet that most computer programmers have, on
multiple occasions, expressed an opinion about the desirability of certain
kinds of type systems in programming languages. Contrary to popular
conception, that's a great thing! Programmers who care about their tools are
the same programmers who care about their work, so I hope the debate rages on.&lt;/p&gt;

&lt;p&gt;There are a few common misconceptions, though, that confuse these discussions.
This article runs through those I've encountered that obscure the most
important parts of the debate. My goal is to build on a shared understanding
of some of the basic issues, and help people get to the interesting parts more
quickly.&lt;/p&gt;

&lt;h3&gt;Classifying Type Systems&lt;/h3&gt;

&lt;p&gt;Type systems are commonly classified by several words, of which the most
common are &quot;static,&quot; &quot;dynamic,&quot; &quot;strong,&quot; and &quot;weak.&quot; In this section, I
address the more common kinds of classification. Some are useful, and some are
not.&lt;/p&gt;

&lt;h4&gt;Strong and Weak Typing&lt;/h4&gt;

&lt;p&gt;Probably the most common way type systems are classified is &quot;strong&quot; or
&quot;weak.&quot; This is unfortunate, since these words have nearly no meaning at all.
It is, to a limited extent, possible to compare two languages with very
similar type systems, and designate one as having the strong&lt;strong&gt;er&lt;/strong&gt; of those
two systems. Beyond that, the words mean nothing at all.&lt;/p&gt;

&lt;p&gt;Therefore: I give the following general definitions for strong and weak
typing, at least when used as absolutes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Strong typing:&lt;/strong&gt; A type system that I like and feel comfortable with&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weak typing:&lt;/strong&gt; A type system that worries me, or makes me feel uncomfortable&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What about when the phrase is used in a more limited sense? Then strong
typing, depending on the speaker or author, may mean anything on the spectrum
from &quot;static&quot; to &quot;sound,&quot; both of which are defined below.&lt;/p&gt;

&lt;h4&gt;Static and Dynamic Types&lt;/h4&gt;

&lt;p&gt;This is very nearly the &lt;em&gt;only&lt;/em&gt; common classification of type systems that has
real meaning. As a matter of fact, it's significance is frequently under-
estimated. I realize that may sound ridiculous; but this theme will recur
throughout this article. Dynamic and static type systems are two &lt;em&gt;completely&lt;/em&gt;
different things, whose goals happen to partially overlap.&lt;/p&gt;

&lt;p&gt;A static type system is a mechanism by which a compiler examines source code
and assigns labels (called &quot;types&quot;) to pieces of the syntax, and then uses
them to infer something about the program's behavior. A dynamic type system is
a mechanism by which a compiler generates code to keep track of the sort of
data (coincidentally, also called its &quot;type&quot;) used by the program. The use of
the same word &quot;type&quot; in each of these two systems is, of course, not really
entirely coincidental; yet it is best understood as having a sort of weak
historical significance. Great confusion results from trying to find a world
view in which &quot;type&quot; really means the same thing in both systems. It doesn't.
The better way to approach the issue is to recognize that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much of the time, programmers are trying to solve the same problem with static and dynamic types.&lt;/li&gt;
&lt;li&gt;Nevertheless, static types are not limited to problems solved by dynamic types.&lt;/li&gt;
&lt;li&gt;Nor are dynamic types limited to problems that can be solved with static types.&lt;/li&gt;
&lt;li&gt;At their core, these two techniques are not the same thing at all.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Observing the second of these four simple facts is a popular pass-time in some
circles. Consider &lt;a href=&quot;http://web.archive.org/web/20080822101209/http://perl.plover.com/yak/typing/notes.html&quot;&gt;this set of presentation notes&lt;/a&gt;, with a rather
complicated &quot;the type system found my infinite loop&quot; comment. From a
theoretical perspective, preventing infinite loops is in a very deep sense the
most basic possible thing you can do with static types! The simply-typed
lambda calculus, on which all other type systems are based, proves that
programs terminate in a finite amount of time. Indeed, the more interesting
question is how to usefully extend the type system to be able to describe
programs that don't terminate! Finding infinite loops, though, is not in the
class of things most people associate with &quot;types,&quot; so it's surprising. It is,
indeed, provably impossible with dynamic types (that's called the halting
problem; you've probably heard of it!). But it's nothing special for static
types. Why? Because they are an entirely different thing from dynamic types.&lt;/p&gt;

&lt;p&gt;The dichotomy between static and dynamic types is somewhat misleading. Most
languages, even when they claim to be dynamically typed, have some static
typing features. As far as I'm aware, _all_languages have some dynamic typing
features. However, most languages can be characterized as choosing one or the
other. Why? Because of the first of the four facts listed above: many of the
problems solved by these features overlap, so building in strong versions of
both provides little benefit, and significant cost.&lt;/p&gt;

&lt;h4&gt;Other Distinctions&lt;/h4&gt;

&lt;p&gt;There are many other ways to classify type systems. These are less common, but
here are some of the more interesting ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sound types.&lt;/strong&gt; A sound type system is one that provides some kind of guarantee. It is a well-defined concept relating to static type systems, and has proof techniques and all those bells and whistles. Many modern type systems are sound; but older languages like C often do not have sound type systems by design; their type systems are just designed to give warnings for common errors. The concept of a sound type system can be imperfectly generalized to dynamic type systems as well, but the exact definition there may vary with usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explicit/Implicit Types.&lt;/strong&gt; When these terms are used, they refer to the extent to which a compiler will reason about the static types of parts of a program. All programming languages have some form of reasoning about types. Some have more than others. ML and Haskell have implicit types, in that no (or very few, depending on the language and extensions in use) type declarations are needed. Java and Ada have very explicit types, and one is constantly declaring the types of things. All of the above have (relatively, compared to C and C++, for example) strong static type systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Lambda Cube.&lt;/strong&gt; Various distinctions between static type systems are summarized with an abstraction called the &quot;lambda cube.&quot; Its definition is beyond the scope of this article, but it basically looks at whether the system provides certain features: parametric types, dependent types, or type operators. Look &lt;a href=&quot;http://web.archive.org/web/20080822101209/http://citeseer.ist.psu.edu/barendregt92lambda.html&quot;&gt;here&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structural/Nominal Types.&lt;/strong&gt; This distinction is generally applied to static types with subtyping. Structural typing means a type is assumed whenever it is possible to validly assume it. For example, a record with fields called x, y, and z might be automatically considered a subtype of one with fields x and y. With nominal typing, there would be no such assumed relationship unless it were declared somewhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duck Typing.&lt;/strong&gt; This is a word that's become popular recently. It refers to the dynamic type analogue of structural typing. It means that rather than checking a tag to see whether a value has the correct general type to be used in some way, the runtime system merely checks that it supports all of the operations performed on it. Those operations may be implemented differently by different types.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is but a small sample, but this section is too long already.&lt;/p&gt;

&lt;h3&gt;Fallacies About Static and Dynamic Types&lt;/h3&gt;

&lt;p&gt;Many programmers approach the question of whether they prefer static or
dynamic types by comparing some languages they know that use both techniques.
This is a reasonable approach to most questions of preference. The problem, in
this case, is that most programmers have limited experience, and haven't tried
a lot of languages. For context, here, six or seven doesn't count as &quot;a lot.&quot;
On top of that, it requires more than a cursory glance to really see the
benefit of these two very different styles of programming. Two interesting
consequences of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many programmers have used very poor statically typed languages.&lt;/li&gt;
&lt;li&gt;Many programmers have used dynamically typed languages very poorly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This section, then, brings up some of the consequences of this limited
experience: things many people assume about static or dynamic typing that just
ain't so.&lt;/p&gt;

&lt;h4&gt;Fallacy: Static types imply type declarations&lt;/h4&gt;

&lt;p&gt;The thing most obvious about the type systems of Java, C, C++, Pascal, and
many other widely-used &quot;industry&quot; languages is not that they are statically
typed, but that they are explicitly typed. In other words, they require lots
of type declarations. (In the world of less explicitly typed languages, where
these declarations are optional, they are often called &quot;type annotations&quot;
instead. You may find me using that word.) This gets on a lot of people's
nerves, and programmers often turn away from statically typed languages for
this reason.&lt;/p&gt;

&lt;p&gt;This has nothing to do with static types. The first statically typed languages
were explicitly typed by necessity. However, type inference algorithms -
techniques for looking at source code with no type declarations at all, and
deciding what the types of its variables are - have existed for many years
now. The ML language, which uses it, is among the older languages around
today. Haskell, which improves on it, is now about 15 years old. Even C# is
now adopting the idea, which will raise a lot of eyebrows (and undoubtedly
give rise to claims of its being &quot;weakly typed&quot; -- see definition above). If
one does not like type declarations, one is better off describing that
accurately as not liking explicit types, rather than static types.&lt;/p&gt;

&lt;p&gt;(This is not to say that type declarations are always bad; but in my
experience, there are few situations in which I've wished to see them
required. Type inference is generally a big win.)&lt;/p&gt;

&lt;h4&gt;Fallacy: Dynamically typed languages are weakly typed&lt;/h4&gt;

&lt;p&gt;The statement made at the beginning of this thread was that many programmers
have used dynamically typed languages poorly. In particular, a lot of
programmers coming from C often treat dynamically typed languages in a manner
similar to what made sense for C prior to ANSI function prototypes.
Specifically, this means adding lots of comments, long variable names, and so
forth to obssessively track the &quot;type&quot; information of variables and functions.&lt;/p&gt;

&lt;p&gt;Doing this prevents a programmer from realizing the benefits of dynamic
typing. It's like buying a new car, but refusing to drive any faster than a
bicycle. The car is horrible; you can't get up the mountain trails, and it
requires gasoline on top of everything else. Indeed, a car is a pretty lousy
excuse for a bicycle! Similarly, dynamically typed languages are pretty lousy
excuses for statically typed languages.&lt;/p&gt;

&lt;p&gt;The trick is to compare dynamically typed languages when used in ways that fit
in with their design and goals. Dynamically typed languages have all sorts of
mechanisms to fail immediately and clearly if there is a runtime error, with
diagnostics that show you exactly how it happened. If you program with the
same level of paranoia appropriate to C - where a simple bug may cause a day
of debugging - you will find that it's tough, and you won't be actually using
your tools.&lt;/p&gt;

&lt;p&gt;(As a side comment, and certainly a more controversial one, the converse is
equally true; it doesn't make sense to do the same kinds of exhaustive unit
testing in Haskell as you'd do in Ruby or Smalltalk. It's a waste of time.
It's interesting to note that the whole TDD movement comes from people who are
working in dynamically typed languages... I'm not saying that unit testing is
a bad idea with static types; only that it's entirely appropriate to scale it
back a little.)&lt;/p&gt;

&lt;h4&gt;Fallacy: Static types imply upfront design or waterfall methods&lt;/h4&gt;

&lt;p&gt;Some statically typed languages are also designed to enforce someone's idea of
a good development process. Specifically, they often require or encourage that
you specify the whole interface to something in one place, and then go write
the code. This can be annoying if one is writing code that evolves over time
or trying out ideas. It sometimes means changing things in several different
places in order to make one tweak. The worst form of this I'm aware of (though
done mainly for pragmatic reasons rather than ideological ones) is C and C++
header files. Pascal has similar aims, and requires that all variables for a
procedure or function be declared in one section at the top. Though few other
languages enforce this separation in quite the same way or make it so hard to
avoid, many do encourage it.&lt;/p&gt;

&lt;p&gt;It is absolutely true that these language restrictions can get in the way of
software development practices that are rapidly gaining acceptance, including
agile methodologies. It's also true that they have nothing to do with static
typing. There is nothing in the core ideas of static type systems that has
anything to do with separating interface from implementation, declaring all
variables in advance, or any of these other organizational restrictions. They
are sometimes carry-overs from times when it was considered normal for
programmers to cater to the needs of their compilers. They are sometimes
ideologically based decisions. They are not static types.&lt;/p&gt;

&lt;p&gt;If one doesn't want a language deciding how they should go about designing
their code, it would be clearer to say so. Expressing this as a dislike for
static typing confuses the issue.&lt;/p&gt;

&lt;p&gt;This fallacy is often stated in different terms: &quot;I like to do exploratory
programming&quot; is the popular phrase. The idea is that since everyone knows
statically typed languages make you do everything up front, they aren't as
good for trying out some code and seeing what it's like. Common tools for
exploratory programming include the REPL (read-eval-print loop), which is
basically an interpreter that accepts statements in the language a line at a
time, evaluates them, and tells you the result. These tools are quite useful,
and they exist for many languages, both statically and dynamically typed. They
don't exist (or at least are not widely used) for Java, C, or C++, which
perpetuates the unfortunate myth that they only work in dynamically typed
languages. There may be advantages for dynamic typing in exploratory
programming (in fact, there certainly are &lt;em&gt;some&lt;/em&gt; advantages, anyway), but it's
up to someone to explain what they are, rather than just to imply the lack of
appropriate tools or language organization.&lt;/p&gt;

&lt;h4&gt;Fallacy: Dynamically typed languages provide no way to find bugs&lt;/h4&gt;

&lt;p&gt;A common argument leveled at dynamically typed languages is that failures will
occur for the customer, rather than the developer. The problem with this
argument is that it very rarely occurs in reality, so it's not very
convincing. Programs written in dynamically typed languages don't have far
higher defect rates than programs written in languages like C++ and Java.&lt;/p&gt;

&lt;p&gt;One can debate the reasons for this, and there are good arguments to be had
there. One reason is that the average skill level of programmers who know Ruby
is higher than those who know Java, for example. One reason is that C++ and
Java have relatively poor static type systems. Another reason, though, is
testing. As mentioned in the aside above, the whole unit testing movement
basically came out of dynamically typed languages. It has some definite
disadvantages over the guarantees provided by static types, but it also has
some advantages; static type systems can't check nearly as many properties of
code as testing can. Ignoring this fact when talking to someone who really
knows Ruby will basically get you ignored in turn.&lt;/p&gt;

&lt;h4&gt;Fallacy: Static types imply longer code&lt;/h4&gt;

&lt;p&gt;This fallacy is closely associated with the one above about type declarations.
Type declarations are the reason many people associated static types with a
lot of code. However, there's another side to this. Static types often allow
one to write much more concise code!&lt;/p&gt;

&lt;p&gt;This may seem like a surprising claim, but there's a good reason. Types carry
information, and that information can be used to resolve things later on and
prevent programmers from needing to write duplicate code. This doesn't show up
often in simple examples, but a really excellent case is found in the Haskell
standard library's &lt;code&gt;Data.Map&lt;/code&gt; module. This module implements a balanced binary
search tree, and it contains a function whose type signature looks like this:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;lookup :: (Monad m, Ord k) =&gt; k -&gt; Map k a -&gt; m a&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a magical function. It says that I can look something up in a &lt;code&gt;Map&lt;/code&gt;
and get back the result. Simple enough, but here's the trick: what do I do if
the result isn't there? Common answers might include returning a special
&quot;nothing&quot; value, or aborting the current computation and going to an error
handler, or even terminating the whole program. The function above does any of
the above! Here's how I compare the result against a special nothing value:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;case (lookup bobBarker employees) of Nothing -&gt; hire bobBarker Just salary
-&gt; pay bobBarker salary&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How does Haskell know that I want to choose the option of getting back
&lt;code&gt;Nothing&lt;/code&gt; when the value doesn't exist, rather than raising some other kind of
error? It's because I wrote code afterward to compare the result against
&lt;code&gt;Nothing&lt;/code&gt;! If I had written code that didn't immediately handle the problem
but was called from somewhere that handled errors three levels up the stack,
then &lt;code&gt;lookup&lt;/code&gt; would have failed that way instead, and I'd be able to write
seven or eight consecutive lookup statements and compute something with the
results without having to check for &lt;code&gt;Nothing&lt;/code&gt; all the time. This completely
dodges the very serious &quot;exception versus return value&quot; debate in handling
failures in many other languages. This debate has no answer. Return values are
great if you want to check them now; exceptions are great if you want to
handle them several levels up. This code simply goes along with whatever you
write the code to do.&lt;/p&gt;

&lt;p&gt;The details of this example are specific to Haskell, but similar examples can
be constructed in many statically typed languages. There is no evidence that
code in ML or Haskell is any longer than equivalent code in Python or Ruby.
This is a good thing to remember before stating, as if it were obviously true,
that statically typed languages require more code. It's not obvious, and I
doubt if it's true.&lt;/p&gt;

&lt;h3&gt;Benefits of Static Types&lt;/h3&gt;

&lt;p&gt;My experience is that the biggest problems in the static/dynamic typing debate
occur in failing to understand the issues and potential of static types. The
next two sections, then, are devoted to explaining this position in detail.
This section works upward from the pragmatic perspective, while the next
develops it into its full form.&lt;/p&gt;

&lt;p&gt;There are a number of commonly cited advantages for static typing. I am going
to list them in order from &lt;em&gt;least&lt;/em&gt; to &lt;em&gt;most&lt;/em&gt; significant. (This helps the
general structure of working up to the important stuff.)&lt;/p&gt;

&lt;h4&gt;Performance&lt;/h4&gt;

&lt;p&gt;Performance is the gigantic red herring of all type system debates. The
knowledge of the compiler in a statically typed language can be used in a
number of ways, and improving performance is one of them. It's one of the
least important, though, and one of the least interesting.&lt;/p&gt;

&lt;p&gt;For most computing environments, performance is the problem of two decades
ago. Last decade's problem was already different, and this decades problems
are at least 20 years advanced beyond performance being the main driver of
technology decisions. We have new problems, and performance is not the place
to waste time.&lt;/p&gt;

&lt;p&gt;(On the other hand, there are a few environments where performance still
matters. Languages in use there are rarely dynamically typed, but I'm not
interested enough in them to care much. If you do, maybe this is your corner
of the type system debate.)&lt;/p&gt;

&lt;h4&gt;Documentation&lt;/h4&gt;

&lt;p&gt;If, indeed, performance is irrelevant, what does one look to next? One answer
is documentation. Documentation is an important aspect of software, and static
typing can help.&lt;/p&gt;

&lt;p&gt;Why? Because documentation isn't just about comments. It's about everything
that helps people understand software. Static type systems build ideas that
help explain a system and what it does. The capture information about the
inputs and outputs of various functions and modules. This is exactly the set
of information needed in documentation. Clearly, if all of this information is
written in comments, there is a pretty good chance it will eventually become
out of date. If this information is written in identifier names, it will be
nearly impossible to fit it all in. It turns out that type information is a
very nice place to keep this information.&lt;/p&gt;

&lt;p&gt;That's the boring view. As everyone knows, though, it's better to have self-
documenting code than code that needs a lot of comments (even if it has
them!). Conveniently enough, most languages with interesting static type
systems have type inference, which is directly analogous to self-documenting
code. Information about the correct way to use a piece of code is extracted
from the code itself (i.e., it's self-documenting), but then verified and
presented in a convenient format. It's documentation that doesn't need to be
maintained or even written, but is available on demand even without reading
the source code.&lt;/p&gt;

&lt;h4&gt;Tools and Analysis&lt;/h4&gt;

&lt;p&gt;Things get way more interesting than documentation, though. Documentation is
writing for human beings, who are actually pretty good at understanding code
anyway. It's great that the static type system can help, but it doesn't do
anything fundamentally new.&lt;/p&gt;

&lt;p&gt;Fundamentally new things happen when type systems help computer programs to
understand code. Perhaps I need to explain myself here. After all, a wise man
(Martin Fowler, IIRC) one said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Any fool can write code that a computer can understand. Good programmers
write code that humans can understand.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don't disagree with Martin Fowler, but we have different definitions of
&lt;em&gt;understand&lt;/em&gt; in mind. Getting a computer to follow code step by step is easy.
Getting a computer to analyze it and answer more complex questions about it is
a different thing entirely, and it is very hard.&lt;/p&gt;

&lt;p&gt;We often want our development tools to understand code. This is a big deal.
I'll turn back to Martin Fowler, who &lt;a href=&quot;http://web.archive.org/web/20080822101209/http://www.martinfowler.com/bliki/DynamicTyping.html&quot;&gt;points this out as well&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Correctness&lt;/h4&gt;

&lt;p&gt;Ultimately, though, the justification for static typing has to come back to
writing correct code. Correctness, of course, is just the program doing &quot;what
you want.&quot;&lt;/p&gt;

&lt;p&gt;This is a really tough problem; perhaps the toughest of all. The theory of
computation has a result called Rice's Theorem, which essentially says this:
Given an arbitrary program written in a general purpose programming language,
it is impossible to write a computer program that determines anything about
the program's output. If I'm teaching an intro to programming class and assign
my students to write &quot;hello world&quot;, I can't program a grader to determine if
they did so or not. There will be some programs for which the answer is easy;
if the program never makes any I/O calls, then the answer is no. If the
program consists of a single print statement, it's easy to check if the answer
is yes. However, there will be some complicated programs for which my grader
can never figure out the answer. (A minor but important technical detail: one
can't run the program and wait for it to finish, because the program might
never finish!) This is true of any statement about programs, including some
more interesting ones like &quot;does this program ever finish?&quot; or &quot;does this
program violate my security rules?&quot;&lt;/p&gt;

&lt;p&gt;Given that we can't actually check the correctness of a program, there are two
approaches that help us make approximations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Testing:&lt;/strong&gt; establishes upper bounds on correctness&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proof:&lt;/strong&gt; establishes lower bounds on correctness&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Of course, we care far more about lower bounds than upper bounds. The problem
with proofs, though, is the same as the problem with documentation. Proving
correctness is easy only somewhat insanely difficult when you have a static
body of code to prove things about. When the code is being maintained by three
programmers and changing seven times per day, maintaining the correctness
proofs falls behind. Static typing here plays exactly the same role as it does
with documentation. If (and this is a big if) you can get your proofs of
correctness to follow a certain form that can be reproduced by machine, the
computer itself can be the prover, and let you know if the change you just
made breaks the proof of correctness. The &quot;certain form&quot; is called structural
induction (over the syntax of the code), and the prover is called a type
checker.&lt;/p&gt;

&lt;p&gt;An important point here is that static typing does not preclude proving
correctness in the traditional way, nor testing the program. It is a technique
to handle those cases in which testing might be guaranteed to succeed so they
don't need testing; and similarly, to provide a basis from which the effort of
manual proof can be saved for those truly challenging areas in which it is
necessary.&lt;/p&gt;

&lt;h4&gt;Dynamic Typing Returns&lt;/h4&gt;

&lt;p&gt;Certainly dynamic typing has answers to this. Dynamically typed languages can
sometimes perform rather well (see Dylan), sometimes have great tools (see
Smalltalk), and I'm sure they occasionally have good documentation as well,
though the hunt for an example is too much for me right now. These are not
knock-down arguments for static typing, but they are worth being aware of.&lt;/p&gt;

&lt;p&gt;The correctness case is particularly enlightening. Just as static types
strengthened our proofs of correctness by making them easier and automatic,
dynamic typing improves testing by making it easier and more effective. It
simply makes the code fail more spectacularly. I find it amusing when novice
programmers believe their main job is preventing programs from crashing. I
imagine this spectacular failure argument wouldn't be so appealing to such a
programmer. More experienced programmers realize that correct code is great,
code that crashes could use improvement, but incorrect code that doesn't crash
is a horrible nightmare.&lt;/p&gt;

&lt;p&gt;It is through testing, then, that dynamically typed languages establish
correctness. Recall that testing establishes only upper bounds on correctness.
(Dijkstra said it best: &quot;Program testing can be used to show the presence of
bugs, but never to show their absence.&quot;) The hope is that if one tries hard
enough and still fails to show the presence of bugs, then their absence
becomes more likely. If one can't seem to prove any better upper bound, then
perhaps the correctness really is 100%. Indeed, there is probably at some
correlation in that direction.&lt;/p&gt;

&lt;h3&gt;What is a Type?&lt;/h3&gt;

&lt;p&gt;This is as good a point as any to step back and ask the fundamental question:
what is a type? I've already mentioned that I think there are two answers. One
answer is for static types, and the other is for dynamic types. I am
considering the question for static types.&lt;/p&gt;

&lt;p&gt;It is dangerous to answer this question too quickly. It is dangerous because
we risk excluding some things as types, and missing their &quot;type&quot; nature
because we never look for it. Indeed, the definition of a type that I will
eventually give is extremely broad.&lt;/p&gt;

&lt;h4&gt;Problems with Common Definitions&lt;/h4&gt;

&lt;p&gt;One common saying, quoted often in an attempt to reconcile static and dynamic
typing, goes something like this: Statically typed languages assign types to
variables, while dynamically typed languages assign types to values. Of
course, this doesn't actually define types, but it is already clearly and
obviously wrong. One could fix it, to some extent, by saying &quot;statically typed
languages assign types to expressions, ...&quot; Even so, the implication that
these types are fundamentally the same thing as the dynamic version is quite
misleading.&lt;/p&gt;

&lt;p&gt;What is a type, then? When a typical programmer is asked that question, they
may have several answers. Perhaps a type is just a set of possible values.
Perhaps it is a set of operations (a very structural-type-ish view, to be
sure). There could be arguments in favor of each of these. One might make a
list: integers, real numbers, dates, times, and strings, and so on.
Ultimately, though, the problem is that these are all symptoms rather than
definitions. Why is a type a set of values? It's because one of the things we
want to prove about our program is that it doesn't calculate the square roots
of a string. Why is a type a set of operations? It's because one of the things
we want to know is whether our program attempts to perform an impossible
operation.&lt;/p&gt;

&lt;p&gt;Let's take a look at another thing we often want to know: does our web
application stick data from the client into SQL queries without escaping
special characters first? If this is what we want to know, then these becomes
types. &lt;a href=&quot;http://web.archive.org/web/20080822101209/http://blog.moertel.com/articles/2006/10/18/a-type-based-solution-to-the-strings-problem&quot;&gt;This article by Tom Moertel&lt;/a&gt; builds this on top of Haskell's type
system. So far, it looks like a valid definition of &quot;type&quot; is as follows:
something we want to know.&lt;/p&gt;

&lt;h4&gt;A Type System&lt;/h4&gt;

&lt;p&gt;Clearly that's not a satisfactory definition of a type. There are plenty of
things we want to know that types can't tell us. We want to know whether our
program is correct, but I already said that types provide conservative lower
bounds on correctness, and don't eliminate the need for testing or manual
proof. What makes a type a type, then? The other missing component is that a
type is part of a type system.&lt;/p&gt;

&lt;p&gt;Benjamin Pierce's book &lt;a href=&quot;http://web.archive.org/web/20080822101209/http://www.amazon.com/dp/0262162091&quot;&gt;Types and Programming Languages&lt;/a&gt; is far ans away
the best place to read up on the nitty gritty details of static type systems,
at least if you are academically inclined. I'll quote his definition.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;A type system is a tractable syntactic method for proving the absence of
certain program behaviors by classifying phrases according to the kinds of
values they compute.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a complex definition, but the key ideas are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;syntactic method .. by classifying phrases&lt;/em&gt;: A type system is necessarily tied to the syntax of the language. It is a set of rules for working bottom up from small to large phrases of the language until you reach the result.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;proving the absence of certain program behaviors&lt;/em&gt;: This is the goal. There is no list of &quot;certain&quot; behaviors, though. The word just means that for any specific type system, there will be a list of things that it proves. What it proves is left wide open. (Later on in the text: &quot;... each type system comes with a definition of the behaviors it aims to prevent.&quot;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tractable&lt;/em&gt;: This just means that the type system finishes in a reasonable period of time. Without wanting to put words in anyone's mouth, I think it's safe to say most people would agree that it's a mistake to include this in the definition of a type system. Some languages even have undecidable type systems. Nevertheless, it is certainly a common goal; one doesn't expect the compiler to take two years to type-check a program, even if the program will run for two years.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The remainder of the definition is mainly unimportant. The &quot;kinds of values
they compute&quot; is basically meaningless unless we know what kinds we might
choose from, and the answer is any kind at all.&lt;/p&gt;

&lt;p&gt;An example looks something like that. Given the expression &lt;code&gt;5 + 3&lt;/code&gt;, a type
checker may look at 5 and infer that it's an integer. It may look at 3 and
infer it's an integer. It may then look at the + operator, and know that when
+ is applied to two integers, the result is an integer. Thus it's proven the
absence of program behaviors (such as adding an integer to a string) by
working up from the basic elements of program syntax.&lt;/p&gt;

&lt;h4&gt;Examples of Unusual Type Systems&lt;/h4&gt;

&lt;p&gt;That was a pretty boring example, and one that plays right into a trap:
thinking of &quot;type&quot; as meaning the same thing it does in a dynamic type system.
Here are some more interesting problems being solved with static types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20080822101209/http://wiki.di.uminho.pt/twiki/pub/Personal/Xana/WebHome/report.pdf&quot;&gt;http://wiki.di.uminho.pt/twiki/pub/Personal/Xana/WebHome/report.pdf&lt;/a&gt;. Uses types to ensure that the correct kinds of data are gotten out of a relational database. Via the type system, the compiler ends up understanding how to work with concepts like functional dependencies and normal forms, and can statically prove levels of normalization.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20080822101209/http://www.cs.bu.edu/~hwxi/academic/papers/pldi98.pdf&quot;&gt;http://www.cs.bu.edu/~hwxi/academic/papers/pldi98.pdf&lt;/a&gt;. Uses an extension to ML's type system to prove that arrays are never accessed out of bounds. This is an unusually hard problem to solve without making the languages that solve it unusable, but it's a popular one to work on.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20080822101209/http://www.cis.upenn.edu/~stevez/papers/LZ06a.pdf&quot;&gt;http://www.cis.upenn.edu/~stevez/papers/LZ06a.pdf&lt;/a&gt;. This is great. This example uses Haskell's type system to let someone define a security policy for a Haskell program, in Haskell, and then proves that the program properly implements that security. If a programmer gets security wrong, the compiler will complain rather than opening up a potential security bug in the system.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20080822101209/http://www.brics.dk/RS/01/16/BRICS-RS-01-16.pdf&quot;&gt;http://www.brics.dk/RS/01/16/BRICS-RS-01-16.pdf&lt;/a&gt;. Just in case you thought type systems only solved easy problems, this bit of Haskell gets the type system to prove two central theorems about the simply typed lambda calculus, a branch of computation theory!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The point of these examples is to point out that type systems can solve all
sorts of programming problems. For each of these type systems, concepts of
types are created that represent the ideas needed to accomplish this
particular task with the type system. Some problems solved by static type
systems look nothing like the intuitive idea of a type. A buggy security check
isn't normally considered a type error, but only because not many people use
languages with type systems that solve that problem.&lt;/p&gt;

&lt;p&gt;To reiterate the point above, it's important to understand how limiting it is
to insist, as many people do, that the dynamic typing definition of a &quot;type&quot;
is applied to static typing as well. One would miss the chance to solve
several real-world problems mentioned above.&lt;/p&gt;

&lt;h4&gt;The True Meaning of Type&lt;/h4&gt;

&lt;p&gt;So what is a type? The only true definition is this: a type is a label used by
a type system to prove some property of the program's behavior. If the type
checker can assign types to the whole program, then it succeeds in its proof;
otherwise it fails and points out why it failed. This is a definition, then,
but it doesn't tell us anything of fundamental importance. Some further
exploration leads us to insight about the fundamental trade-offs involved in
using a static type checker.&lt;/p&gt;

&lt;p&gt;If you were looking at things the right way, your ears may have perked up a
few sections back, when I said that Rice's Theorem says we can't determine
anything about the output of a program. Static type systems prove properties
of code, but it almost appears that Rice's Theorem means we can't prove
anything of interest with a computer. If true, that would be an ironclad
argument against static type systems. Of course, it's not true. However, it is
very nearly true. What Rice's Theorem says is that we can't determine
anything. (Often the word &quot;decide&quot; is used; they mean the same thing here.) It
didn't say we can't prove anything. It's an important distinction!&lt;/p&gt;

&lt;p&gt;What this distinction means is that a static type system is a conservative
estimate. If it accepts a program, then we know the program has the properties
proven by that type checker. If it fails... then we don't know anything.
Possibly the program doesn't have that property, or possibly the type checker
just doesn't know how to prove it. Furthermore, there is an ironclad
mathematical proof that a type checker of any interest at all is &lt;em&gt;always&lt;/em&gt;
conservative. Building a type checker that doesn't reject any correct programs
isn't just difficult; it's impossible.&lt;/p&gt;

&lt;p&gt;That, then, is the trade-off. We get assurance that the program is correct (in
the properties checked by this type checker), but in turn we must reject some
interesting programs. To continue the pattern, this is the diametric opposite
of testing. With testing, we are assured that we'll never fail a correct
program. The trade-off is that for any program with an infinite number of
possible inputs (in other words, any interesting program), a test suite may
still accept programs that are not correct - even in just those properties
that are tested.&lt;/p&gt;

&lt;h3&gt;Framing the Interesting Debate&lt;/h3&gt;

&lt;p&gt;That last paragraph summarizes the interesting part of the debate between
static and dynamic typing. The battleground on which this is fought out is
framed by eight questions, four for each side:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For what interesting properties of programs can we build static type systems?&lt;/li&gt;
&lt;li&gt;How close can we bring those type systems to the unattainable ideal of never rejecting a correct program?&lt;/li&gt;
&lt;li&gt;How easy can it be made to program in a language with such a static type system?&lt;/li&gt;
&lt;li&gt;What is the cost associated with accidentally rejecting a correct computer program?&lt;/li&gt;
&lt;li&gt;For what interesting properties of programs can we build test suites via dynamic typing?&lt;/li&gt;
&lt;li&gt;How close can we bring those test suites to the unattainable ideal of never accepting a broken program?&lt;/li&gt;
&lt;li&gt;How easy can it be made to write and execute test suites for programs?&lt;/li&gt;
&lt;li&gt;What is the cost associated with accidentally accepting an incorrect computer program?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If you knew the answer to those eight questions, you could tell us all, once
and for all, where and how we ought to use static and dynamic typing for our
programming tasks.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Case Study in being excellent: Divvy</title>
   <link href="http://blog.steveklabnik.com/2010/06/30/case-study-in-being-excellent-divvy.html"/>
   <updated>2010-06-30T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/06/30/case-study-in-being-excellent-divvy</id>
   <content type="html">&lt;p&gt;The other day I wrote a post about &lt;a href=&quot;http://blog.steveklabnik.com/being-excellent-to-each-other&quot;&gt;being excellent to each other&lt;/a&gt;.
Today, I've got a great example of that for you: Divvy.&lt;/p&gt;

&lt;p&gt;What would you do if you received an email like this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/divvy1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here's what happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/divvy2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href=&quot;http://www.reddit.com/r/programming/comments/ckcbr/mizage_a_small_development_company_that_made/&quot;&gt;link to the thread&lt;/a&gt;. Check out some of these comments:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/divvy3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;... okay, maybe that last one is a bit much. But still, they've obviously been
repaid many times over for something that &lt;em&gt;didn't even cost them money&lt;/em&gt;. This
&lt;a href=&quot;http://news.ycombinator.com/item?id=1473770&quot;&gt;comment on HN&lt;/a&gt; really says it all:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/divvy4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you'd also like to support a company for being awesome, here's a link
to &lt;a href=&quot;http://www.mizage.com/divvy/&quot;&gt;Divvy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;EDIT: They've posted the sales afterward on Reddit &lt;a href=&quot;http://www.reddit.com/r/programming/comments/cmmfg/hey_reddit_a_week_ago_someone_posted_about_divvy/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Productivity Waves</title>
   <link href="http://blog.steveklabnik.com/2010/06/08/productivity-waves.html"/>
   <updated>2010-06-08T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/06/08/productivity-waves</id>
   <content type="html">&lt;p&gt;Right now, I'm having a bit of a 'darkness before the dawn' kind of moment. I
feel like I might soon start to become productive again.&lt;/p&gt;

&lt;p&gt;It's sort of strange, how these things travel in waves. Just a month or two
ago, I was super-ultra-crazy productive. I was working on Hackety, coding
Bindlr, writing three days a week on the blog, and more. This doesn't even
count the more-than-a-full-time CloudFab. But lately, all I've wanted to do
was hang out and play video games.&lt;/p&gt;

&lt;p&gt;It seems like this is a cyclic kind of thing. I think 80 hour weeks, even of
things that you love, is kind of unsustainable. It was lots of fun, and I was
feeling pretty good while I was doing it, but now that I'm off that horse,
it's really hard to get back on.&lt;/p&gt;

&lt;p&gt;In any case, here's the status of some of the stuff I've been up to, if you've
been wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Blog: I've got a bunch of stuff half-written. I'll be starting to finish those
off and getting them up here. I've had lots to say, just no motivation to say it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watch.steve: I want a better design, so I'm not doing anything with the site
'till that's done. I don't want to mess with Ryan's look and feel. But I've got
episodes written up, they just need to be recorded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hackety Hack: Fela is making great progress, and I'm going to start reaching
out to Mac development communities to see if I can get some help on the issue
that's ruining my ability to fix things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bindlr: Up, running, and working. Needs more marketing/outreach.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Twitter: started using it again, you read that post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Selling my stuff: most of it is in boxes or thrown away. Time to start selling
the things that were worth money.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maria: currently missing her.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Friends: started actually making it back to XOmB meetings on Saturdays, and
actually going out with some people I haven't talked to in a while. I was really
really bad at this in some cases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This post is kind of random, and I apologize. I've got a good mix of technical
things, book reviews, and social commentary waiting in the wings.&lt;/p&gt;

&lt;p&gt;I'm excited for what June will bring.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>You are terrified of your own children, since they are natives in a world where you will always be immigrants.</title>
   <link href="http://blog.steveklabnik.com/2010/05/01/you-are-terrified-of-your-own-children-since-they-are-natives-in-a-world-where-you-will-always-be-immigrants.html"/>
   <updated>2010-05-01T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/05/01/you-are-terrified-of-your-own-children-since-they-are-natives-in-a-world-where-you-will-always-be-immigrants</id>
   <content type="html">&lt;p&gt;I just saw this today. It kind of goes along with my &quot;Move to the Internet&quot;
post from a few days ago.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Date: Fri, 9 Feb 1996 17:16:35 +0100&lt;/p&gt;

&lt;p&gt;To: &lt;a href=&quot;mailto:barlow@eff.org&quot;&gt;barlow@eff.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From: John Perry Barlow &amp;lt;&lt;a href=&quot;mailto:barlow@eff.org&quot;&gt;barlow@eff.org&lt;/a&gt;&gt;&lt;/p&gt;

&lt;p&gt;Subject: A Cyberspace Independence Declaration&lt;/p&gt;

&lt;p&gt;Yesterday, that great invertebrate in the White House signed into the law
the Telecom &quot;Reform&quot; Act of 1996, while Tipper Gore took digital photographs
of the proceedings to be included in a book called &quot;24 Hours in&lt;/p&gt;

&lt;p&gt;Cyberspace.&quot;&lt;/p&gt;

&lt;p&gt;I had also been asked to participate in the creation of this book by writing
something appropriate to the moment. Given the atrocity that this legislation
would seek to inflict on the Net, I decided it was as good a&lt;/p&gt;

&lt;p&gt;time as any to dump some tea in the virtual harbor.&lt;/p&gt;

&lt;p&gt;After all, the Telecom &quot;Reform&quot; Act, passed in the Senate with only 5
dissenting votes, makes it unlawful, and punishable by a $250,000 to say
&quot;shit&quot; online. Or, for that matter, to say any of the other 7 dirty words&lt;/p&gt;

&lt;p&gt;prohibited in broadcast media. Or to discuss abortion openly. Or to talk
about any bodily function in any but the most clinical terms.&lt;/p&gt;

&lt;p&gt;It attempts to place more restrictive constraints on the conversation in
Cyberspace than presently exist in the Senate cafeteria, where I have dined
and heard colorful indecencies spoken by United States senators on every&lt;/p&gt;

&lt;p&gt;occasion I did.&lt;/p&gt;

&lt;p&gt;This bill was enacted upon us by people who haven't the slightest idea who
we are or where our conversation is being conducted. It is, as my good friend
and Wired Editor Louis Rossetto put it, as though &quot;the illiterate could tell
you what to read.&quot;&lt;/p&gt;

&lt;p&gt;Well, fuck them.&lt;/p&gt;

&lt;p&gt;Or, more to the point, let us now take our leave of them. They have declared
war on Cyberspace. Let us show them how cunning, baffling, and powerful we can
be in our own defense.&lt;/p&gt;

&lt;p&gt;I have written something (with characteristic grandiosity) that I hope will
become one of many means to this end. If you find it useful, I hope you&lt;/p&gt;

&lt;p&gt;will pass it on as widely as possible. You can leave my name off it if you
like, because I don't care about the credit. I really don't.&lt;/p&gt;

&lt;p&gt;But I do hope this cry will echo across Cyberspace, changing and growing and
self-replicating, until it becomes a great shout equal to the idiocy&lt;/p&gt;

&lt;p&gt;they have just inflicted upon us.&lt;/p&gt;

&lt;p&gt;I give you...&lt;/p&gt;

&lt;p&gt;A Declaration of the Independence of Cyberspace&lt;/p&gt;

&lt;p&gt;Governments of the Industrial World, you weary giants of flesh and steel, I
come from Cyberspace, the new home of Mind. On behalf of the future, I ask you
of the past to leave us alone. You are not welcome among us. You have
no sovereignty where we gather.&lt;/p&gt;

&lt;p&gt;We have no elected government, nor are we likely to have one, so I address
you with no greater authority than that with which liberty itself always
speaks. I declare the global social space we are building to be naturally
independent of the tyrannies you seek to impose on us. You have no moral
right to rule us nor do you possess any methods of enforcement we have true
reason to fear.&lt;/p&gt;

&lt;p&gt;Governments derive their just powers from the consent of the governed. You
have neither solicited nor received ours. We did not invite you. You do not
know us, nor do  you know our world. Cyberspace does not lie within your
borders. Do not think that you can build it, as though it were a public
construction project. You cannot. It is an act of nature and it grows itself
through our collective actions.&lt;/p&gt;

&lt;p&gt;You have not engaged in our great and gathering conversation, nor did you
create the wealth of our marketplaces. You do not know our culture, our
ethics, or the unwritten codes that already provide our society more order
than could be obtained by any of your impositions.&lt;/p&gt;

&lt;p&gt;You claim there are problems among us that you need to solve. You use this
claim as an excuse to invade our precincts. Many of these problems don't
exist. Where there are real conflicts, where there are wrongs, we will
identify them and address them by our means. We are forming our own Social
Contract . This governance will arise according to the conditions of our
world, not yours. Our world is different.&lt;/p&gt;

&lt;p&gt;Cyberspace consists of transactions, relationships, and thought itself,
arrayed like a standing wave in the web of our communications.  Ours is a
world that is both everywhere and nowhere, but it is not where bodies live.&lt;/p&gt;

&lt;p&gt;We are creating a world that all may enter without privilege or prejudice
accorded by race, economic power, military force, or station of birth.&lt;/p&gt;

&lt;p&gt;We are creating a world where anyone, anywhere may express his or her
beliefs, no matter how singular, without fear of being coerced into silence
or conformity.&lt;/p&gt;

&lt;p&gt;Your legal concepts of property, expression, identity, movement, and context
do not apply to us. They are based on matter, There is no matter here.&lt;/p&gt;

&lt;p&gt;Our identities have no bodies, so, unlike you, we cannot obtain order by
physical coercion. We believe that from ethics, enlightened self-interest, and
the commonweal, our governance will emerge . Our identities may be
distributed across many of your jurisdictions. The only law that all our
constituent cultures would generally recognize is the Golden Rule. We hope we
will be able to build our particular solutions on that basis.  But we
cannot accept the solutions you are attempting to impose.&lt;/p&gt;

&lt;p&gt;In the United States, you have today created a law, the Telecommunications
Reform Act, which repudiates your own Constitution and insults the dreams of
Jefferson, Washington, Mill, Madison, DeToqueville, and Brandeis. These dreams
must now be born anew in us.&lt;/p&gt;

&lt;p&gt;You are terrified of your own children, since they are natives in a world
where you will always be immigrants. Because you fear them, you entrust your
bureaucracies with the parental responsibilities you are too cowardly
to confront yourselves. In our world, all the sentiments and expressions of
humanity, from the debasing to the angelic, are parts of a seamless whole, the
global conversation of bits. We cannot separate the air that chokes from the
air upon which wings beat.&lt;/p&gt;

&lt;p&gt;In China, Germany, France, Russia, Singapore, Italy and the United States,
you are trying to ward off the virus of liberty by erecting guard posts at the
frontiers of Cyberspace. These may keep out the contagion for a small
time, but they will not work in a world that will soon be blanketed in bit-
bearing media.&lt;/p&gt;

&lt;p&gt;Your increasingly obsolete information industries would perpetuate
themselves by proposing laws, in America and elsewhere, that claim to own
speech itself throughout the world. These laws would declare ideas to be
another industrial product, no more noble than pig iron. In our world,
whatever the human mind may create can be reproduced and distributed
infinitely at no cost. The global conveyance of thought no longer requires
your factories to accomplish.&lt;/p&gt;

&lt;p&gt;These increasingly hostile and colonial measures place us in the same
position as those previous lovers of freedom and self-determination who had to
reject the authorities of distant, uninformed powers. We must declare our
virtual selves immune to your sovereignty, even as we continue to consent to
your rule over our bodies. We will spread ourselves across the Planet so that
no one can arrest our thoughts.&lt;/p&gt;

&lt;p&gt;We will create a civilization of the Mind in Cyberspace. May it be more
humane and fair than the world your governments have made before.&lt;/p&gt;

&lt;p&gt;Davos, Switzerland&lt;/p&gt;

&lt;p&gt;February 8, 1996&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;John Perry Barlow, Cognitive Dissident&lt;/p&gt;

&lt;p&gt;Co-Founder, Electronic Frontier Foundation&lt;/p&gt;

&lt;p&gt;Home(stead) Page: &lt;a href=&quot;http://www.eff.org/~barlow&quot;&gt;http://www.eff.org/~barlow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Message Service: 800/634-3542&lt;/p&gt;

&lt;p&gt;Barlow in Meatspace Today (until Feb 12): Cannes, France&lt;/p&gt;

&lt;p&gt;Hotel Martinez: (33) 92 98 73 00, Fax: (33) 93 39 67 82&lt;/p&gt;

&lt;p&gt;Coming soon to: Amsterdam 2/13-14, Winston-Salem 2/15, San Francisco&lt;/p&gt;

&lt;p&gt;2/16-20, San Jose 2/21, San Francisco 2/21-23, Pinedale, Wyoming&lt;/p&gt;

&lt;p&gt;In Memoriam, Dr. Cynthia Horner and Jerry Garcia&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It is error alone which needs the support of government.  Truth can&lt;/p&gt;

&lt;p&gt;stand by itself.&lt;/p&gt;

&lt;p&gt;                         --Thomas Jefferson, Notes on Virginia&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>A Break with the Past</title>
   <link href="http://blog.steveklabnik.com/2010/04/27/a-break-with-the-past.html"/>
   <updated>2010-04-27T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/04/27/a-break-with-the-past</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.countdowntooauth.com/&quot;&gt;Pretty soon&lt;/a&gt;, Twitter is going to turn off Basic Authentication and switch
entirely to OAuth. &lt;a href=&quot;http://www.scripting.com/stories/2010/04/26/theToxicCoralReef.html&quot;&gt;People are upset&lt;/a&gt;. It's natural. If apps aren't updated,
they'll stop working, entirely. This could be bad.&lt;/p&gt;

&lt;p&gt;But in the long run, it won't be.&lt;/p&gt;

&lt;p&gt;In any sort of long-term endeavor, things can go sour, due to accumulating
cruft over time. You see this in married couples that argue every day, you see
this in old-guard companies that have six layers of management, you see this
in software of all kinds. You don't want to break old stuff, so you support
it. Rocking the boat may cause some problems. It could bring up old wounds.
You might have to ask someone to improve. Things won't ever be the same, and
you're gambling with the outcome, hoping that in the end, everything will be
better.&lt;/p&gt;

&lt;p&gt;Sometimes, this gamble pays off big.&lt;/p&gt;

&lt;p&gt;Apple's managed to do this three times in its history, in a huge way. They've
reinvented themselves a few times, but there were three huge, backward-
compatibility breaking changes that could have killed the company. The first
was the transition from the 68k architecture to the PowerPC architecture, the
eventual change from PowerPC to x86, and the transition from OS9 to OSX.&lt;/p&gt;

&lt;p&gt;Apple managed to make all of these transitions successfully, and it's been one
of the greatest benefits to the company. A huge part of why Windows is so
horrible is that it goes above and beyond the call of duty with backwards
compatibility; Microsoft never wants to rock the boat. When they try to, they
get punished. Look at how poorly the transition to Vista went. So what made it
go so right for Apple, and so wrong for Microsoft?&lt;/p&gt;

&lt;p&gt;The first thing that Apple did right with all of these transitions was being
open about them. People were given ample time to move over to the new
platform. I was young when the 68k change happened, so my remembering of that
time might be fuzzy, but the OSX announcement certainly was made with ample
time. An entire year elapsed between the public beta and the release of 10.1,
which was widely considered the first version of OSX that was worth using. I
remember buying a copy of 10.0, and Apple gave you an upgrade to 10.1 for $30,
similar to the Snow Leopard upgrade. 10.0 was just too buggy to be considered
a proper replacement. Anyway, that was a year, and that's not counting the
time between the announcement and the beta release. For the transition to
Intel, the initial announcement was made in 2005, and Steve Jobs said the
transition would happen over the next two years. That gave everyone plenty of
time to get their ducks in a row.&lt;/p&gt;

&lt;p&gt;The second thing that Apple did correctly was provide ample tools for dealing
with the transition. For the first switch, they provided a 68k emulator, and
kept it going all the way up until the Intel transition. This meant that
people didn't have to re-write their apps from scratch, and gave them a big
window for re-writing apps. Rosetta fulfills the same role for the
PowerPC/Intel change. And during the OS9/OSX changeover, Apple not only let
you emulate OS9, but also created the Carbon framework to bridge the gap
between System 9 and Cocoa.&lt;/p&gt;

&lt;p&gt;Finally, Apple made these changes boldly, and didn't back down. With any kind
of massive change like this, unless someone forces the change through, people
will stay with the old system, and the transition fails. You can see this
happen with both the Python move to Python 3000, the move from Ruby 1.8 to
1.9, and the move from XP to Vista. There's a fine line between giving people
leeway to make the transition and actually forcing them to do it. Apple did a
poor job with this when it came to Adobe, who's being an incredible laggard
with Photoshop. It's a massive application, sure, but Apple announced Carbon's
end of life ages ago, they really should have gotten their shit together.
Generally, Apple's not afraid to end-of-life products after the transition
time is over, though. &lt;/p&gt;

&lt;p&gt;In any case, those seem to be the three things that make a transitional period
work: transparency, tools, and finality. If Twitter wants to survive the
Oauthcalypse (as if they won't), they need to follow the same path. And they
have been. They announced the move to Oauth over a year ago (I think), they've
had libraries and examples out there for ages, and they've picked a date and
they're sticking to it.&lt;/p&gt;

&lt;p&gt;I'm glad they're doing it. OAuth is an important part of Twitter's future, and
it's good that they're embracing it fully.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Living in the Cloud</title>
   <link href="http://blog.steveklabnik.com/2010/04/24/living-in-the-cloud.html"/>
   <updated>2010-04-24T00:00:00-04:00</updated>
   <id>http://blog.steveklabnik.com/2010/04/24/living-in-the-cloud</id>
   <content type="html">&lt;p&gt;I've been joking for a while that I'd like to &quot;move to the Internet.&quot;
Generally I cite my familiarity and love with online culture as opposed to
American culture. I don't really care what's going on in &quot;the real world,&quot; as
I feel it's kind of played out. The whole cycle of &quot;fight wars, reduce
freedoms, sit in front of your TV&quot; has gotten really boring quickly. I find
Internet culture to be more complex, entertaining, and useful. But I'm getting
way off topic, here.&lt;/p&gt;

&lt;p&gt;As a programmer, one of the key skills I rely on daily is the ability to
recognize abstractions. Writing great code requires the ability to see
similarities in things, even when they may not be immediately apparent.
Lately, I've been giving a lot of thought to the idea of &quot;living in the
cloud.&quot; Primarily, cloud computing is about providing services on-demand, and
in the amount you need. Dynamic allocation. It's generally great stuff, and
even though &quot;the cloud&quot; is a bit buzzwordy, it's an awesome concept.&lt;/p&gt;

&lt;p&gt;So what happens when we apply that to meatspace? What does &quot;cloud living&quot; look
like? &quot;Cloud working&quot;?&lt;/p&gt;

&lt;p&gt;Living in the cloud would look a lot like the world Tim Ferriss encourages
with his whole lifestyle design concept, or at least the lifestyle he's
designed for himself. Move around from place to place, live where you find
things interesting, reallocate yourself to a better place when the feeling
dictates. The concept of being a &quot;digital nomad&quot; certainly makes me think of
&quot;living in the cloud.&quot; Doing this right means giving up most material
possessions, as they impede freedom of movement.&lt;/p&gt;

&lt;p&gt;Another important aspect of cloud living would be finding a way to make a
living while being location independent. There was a great article making the
rounds a while back called &quot;&lt;a href=&quot;http://romansnitko.posterous.com/jobs-dont-scale&quot;&gt;Jobs don't scale&lt;/a&gt;.&quot; It's only tangentially
related, but his point about working for other people certainly relates to
freedom of movement. If you have to convince your boss to let you work
remotely, it's much harder than just doing it yourself.&lt;/p&gt;

&lt;p&gt;In any case, I'm very attracted to all of this as an idea. I'd love to travel
the world, working from a different place every day, seeing new sights and
exploring new places. It requires re-thinking a lot of things about what it
means to work, how relationships work, friendships. Can you have kids if you
keep moving around from place to place? How can you stay connected to friends
if you never see them, because you're halfway across the globe? Can your
significant other do the same thing? Can you get month to month leases easily?&lt;/p&gt;

&lt;p&gt;I'm still thinking about this as a concept, but I thought I'd share my
thoughts so far. I'm not moving around the world yet, but I am trying to
increase my own mobility as much as possible. I think I'm finally at a place
where I don't care much for most of my possessions anymore... &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review: Rework</title>
   <link href="http://blog.steveklabnik.com/2010/03/10/book-review-rework.html"/>
   <updated>2010-03-10T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/03/10/book-review-rework</id>
   <content type="html">&lt;p&gt;I've been waiting for this book for a while. &quot;Rework&quot; is the new book by Jason
Fried and David Heinemeier Hansson from 37signals. It hit stores on Tuesday.
Here's a (non-affiliate) link to &lt;a href=&quot;http://www.amazon.com/gp/product/0307463745/ref=s9_simh_gw_p14_t1?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd_r=1RRQJN39HSJ4SMVA2EM4&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=470938631&amp;amp;pf_rd_i=507846&quot;&gt;Rework on Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you who don't know, I'm down in Houston, Texas. I'm here for a
few days before heading over to Austin for SXSW. There's a lot of really cool
start up stuff, as well as 3D people, and a friend of mine. It's been a good
trip so far. But even with waking up at 3am, connecting flights, and a few
hours of driving, I still managed to find a spare moment to head over to a
Borders and grab a copy of Rework. And even though I'm running all over town,
Nick is driving, so I've been able to read all of Rework in between lunches
and networking events.&lt;/p&gt;

&lt;p&gt;Rework is interesting. I described it earlier today &lt;a href=&quot;http://twitter.com/steveklabnik/status/10281523422&quot;&gt;as a philosophy text&lt;/a&gt;,
and I feel that description is absolutely apt. It's 37signals in its purest,
most potent form. If you've read &lt;a href=&quot;http://gettingreal.37signals.com/&quot;&gt;Getting Real&lt;/a&gt;, this territory will
be familiar. In fact, a lot of it is basically the same. I'd be lying if I
told you otherwise. The real truth is that it doesn't matter. People who don't
already know and love 37signals won't have read Getting Real, and so this
stuff will be novel to them. People who do won't mind re-reading this
information again, as they've bought into the philosophy. And an update isn't
a bad thing, either. What makes Rework interesting is how it's different from
Getting Real, not what's the same.&lt;/p&gt;

&lt;p&gt;I thought it'd be most interesting to talk about Rework in the context of it's
own philosophy. I think there are three points in particular in the book
itself that point out just why this book is so good. The first is an old
37signals standby, the other two are new.&lt;/p&gt;

&lt;h3&gt;Build half a product, not a half-assed product&lt;/h3&gt;

&lt;p&gt;This got &lt;a href=&quot;http://gettingreal.37signals.com/ch05_Half_Not_Half_Assed.php&quot;&gt;a section devoted to it in Getting Real&lt;/a&gt;. Here's the core idea:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Throw in every decent idea that comes along and you'll just wind up with a
half-assed version of your product. What you really want to do is build half a
product that kicks ass.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;They mention that Rework used to be twice as big. The next to last draft was
57,000 words, and the final draft was 27,000. This is the biggest difference
between the two books. It's the most pure dosage of Kool-Aid I've ever read.
Each section feels finely honed. They're all either one, two, or three pages,
and an accompanying picture. This book is about what's worked for the company
so far over its lifetime, and this refinement process is clearly demonstrated
here.&lt;/p&gt;

&lt;p&gt;It's always easy to ask for more. I'm really curious about the things that
were cut. Were there more sections? Was each section twice as long? A little
of both? At the same time, this exactly exemplifies the thinking this section
is railing against. If the book was twice as long, would I have learned twice
as much? Probably not. YAGNI.&lt;/p&gt;

&lt;h3&gt;Decommoditize your product&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Make you part of your product or service. Inject what's unique about the way
you think into what you sell.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is something that these guys do really well. It's part of having such
strong opinions, and sharing them with the world. Everyone knows who 37signals
is and what they stand for. If I wrote each chapter of Rework into a blog
post, you'd still recognize it as their philosophy. It also comes through in
the writing. They mention in the notes that Matthew Linderman helped them pull
their distinct styles of writing into a more cohesive whole. He did a good
job, and didn't let the voice get lost in the editing.&lt;/p&gt;

&lt;h3&gt;Out-teach your competition&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Teaching is something individuals and small companies can do that big
companies can't.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Teaching is a topic I've been getting more and more into lately. Hackety Hack
is about teaching; when I speak, I'm teaching; this blog is about teaching.
Rework is about teaching the lessons 37signals have learned about business to
the world. A lot of Signal vs. Noise is about teaching. It's a great way to
get people to recognize you, and a great way to give back. The world can
always use more great teachers.&lt;/p&gt;

&lt;h2&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;There's a reason I'm up late, writing this review. I couldn't put Rework down.
I enjoyed revisiting the old topics; the new ones are still tumbling around in
my brain. I'm sure this book is going to spawn a bunch of posts on this blog
in the future, as I add my own thoughts to the stuff I've learned.
I'd recommend this book to anyone who's working in the business world or doing
a startup, even if they hate that term. It'll give you a lot of interesting
thoughts to chew on.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a more compelling experience for your users through game mechanics</title>
   <link href="http://blog.steveklabnik.com/2010/03/08/create-a-more-compelling-experience-for-your-users-through-game-mechanics.html"/>
   <updated>2010-03-08T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/03/08/create-a-more-compelling-experience-for-your-users-through-game-mechanics</id>
   <content type="html">&lt;p&gt;Ever wonder why some websites are so addictive? Certain sites always keep you
going back, time after time after time. Well, I can't speak for all of them,
but there's a subtle reason that some sites draw your attention on such a
repeated basis: They're actually games.&lt;/p&gt;

&lt;h2&gt;Wait, games?&lt;/h2&gt;

&lt;p&gt;Try a little thought experiment: If I say, &quot;Yeah, he's a ______ addict,&quot; what
are the first few things that pop into your mind? For me, top two are &quot;heroin&quot;
and &quot;World of Warcraft.&quot; I'm not sure what that says about me as a person, but
ignore that for now. What makes these two things so addicting? Why are they
basically synonymous with the word &quot;addict&quot;? Lots of people smoke pot. Lots of
people play Call of Duty. Lots do both, and in copious amounts. So why don't
they get the same label?&lt;/p&gt;

&lt;h2&gt;Heroin: it's a hell of a drug&lt;/h2&gt;

&lt;p&gt;Yeah, that reference is to cocaine, another famously addictive substance. Oh
well.&lt;/p&gt;

&lt;p&gt;Heroin is the poster child for addiction because it's got a built-in viral
loop. That sentence sounds ridiculous, but it's true. It's very easy to start
out with, as it's snorted. No scary needles or anything. You get high really
quickly, due to its chemical properties combined with the fact that your nose
is already close to your brain. It gives a really intense high that is also
fairly short. As you do it, you develop both a psychological addiction as well
as a tolerance. You simultaneously develop a deep desire for more of the drug
as you need a larger quantity of the drug to get the same high. Eventually, it
becomes more and more difficult, but you're so addicted that you get over your
fear of needles and start mainlining.&lt;/p&gt;

&lt;p&gt;World of Warcraft works the same way. It's easy to try, as there are
mechanisms to invite your friends, and the system requirements are fairly low
for a video game. The first few quests are super easy, and so you hit that
quick reward. You get addicted to &quot;Ding!&quot; but it takes longer and longer every
time you do it. Eventually, you max out on levels and have to start doing
other things to get your fix. It may sound funny, but it's absolutely true.
People talk about &quot;relapsing.&quot; They speak of &quot;craving.&quot; That's why WoW has so
many subscribers.&lt;/p&gt;

&lt;h2&gt;How to replicate this success&lt;/h2&gt;

&lt;p&gt;I can't guarantee that you'll be able to make your site as addictive as heroin
is, but many sites use the same basic psychology to keep you coming back. Game
mechanics are one of the tools they use to develop that psychological
addiction. This is something we've been seeing more and more of lately, but it
isn't really being talked about explicitly as a major trend. I really think
that this stuff is really important and useful.&lt;/p&gt;

&lt;p&gt;There are a couple of different mechanisms that web sites can incorporate that
fall under the realm of &quot;game mechanics:&quot;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collectibles: &lt;em&gt;Any sort of item you can accumulate. Sometimes comes in &quot;sets,&quot; which are finite lists.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Points: A concrete number that lets you compare two people. &lt;/li&gt;
&lt;li&gt;Levels: A target number of points, you gain the &quot;level&quot; when you go over that number.&lt;/li&gt;
&lt;li&gt;Trophies: A special kind of level that's unrelated to points. You get it for some other arbitrary reason.&lt;/li&gt;
&lt;li&gt;Rankings: A place where you can go to see how many points, levels, and trophies others have&lt;/li&gt;
&lt;li&gt;Tournaments: A competition between people.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We've all heard these terms used in games. But in web sites? Okay, let's try
those things again:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collectibles: Gowalla items. Facebook &quot;Gifts&quot;&lt;/li&gt;
&lt;li&gt;Points: Twitter followers. Facebook friends. Number of feedbacks. Reddit Karma.&lt;/li&gt;
&lt;li&gt;Levels: eBay &quot;Power Sellers.&quot; Foursquare &quot;Super Users.&quot;&lt;/li&gt;
&lt;li&gt;Trophies: Badges, of any kind. &quot;Achievements&quot;&lt;/li&gt;
&lt;li&gt;Rankings: FourSquare's Leaderboard. Klout. Listorious. Hacker News' top list.&lt;/li&gt;
&lt;li&gt;Tournaments: I actually can't come up with a good example of this. Thoughts?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The same feedback loop happens on these websites. You say something
interesting on Twitter, you gain another follower or two. You say something
else, another follower. You check in, oh look, you're the mayor! You sell an
extra hundred things and get your Power Seller discount.&lt;/p&gt;

&lt;p&gt;That's the hard stuff. It'll get you hooked, and coming back for more.&lt;/p&gt;

&lt;h2&gt;Where's all of this going?&lt;/h2&gt;

&lt;p&gt;This is the current stuff that's being done with game mechanics. But where
could we go, in the future?&lt;/p&gt;

&lt;p&gt;A while back, there was a huge debacle over ReadWriteWeb and Facebook connect.
To give you the basic idea, &lt;a href=&quot;http://www.readwriteweb.com/&quot;&gt;ReadWriteWeb&lt;/a&gt; is a blog that talks about
everything Web2.0. They wrote an article entitled &quot;&lt;a href=&quot;http://www.readwriteweb.com/archives/facebook_wants_to_be_your_one_true_login.php&quot;&gt;Facebook Wants to be your
One True Login&lt;/a&gt;.&quot; Read the comments. Notice something funny? Due to some
Google magic, if you were to Google &quot;Facebook login&quot; the day that was posted,
that article would appear at the top under the &quot;Google News&quot; results. Now, RWW
uses Facebook Connect for their commenting system, and a ton of people
apparently don't know how to use the Internet. So when they said, &quot;Hey, I
think I'll go to Facebook today,&quot; they Googled &quot;facebook login,&quot; clicked the
news story, and went to RWW. They then ignored that RWW is a blog completely
covered in red that looks nothing like Facebook, scrolled until they found the
Facebook icon, clicked it, logged in, and then said &quot;wtf, this isn't my
facebook? Why'd they change the interface again???&quot; This happened a week after
a middle-sized interface upgrade on Facebook, for extra hilarity.&lt;/p&gt;

&lt;p&gt;Now, I won't comment on those people or that situation directly. But one of my
favorite Hacker News posters, &lt;a href=&quot;http://news.ycombinator.com/user?id=patio11&quot;&gt;patio11&lt;/a&gt;, posted &lt;a href=&quot;http://news.ycombinator.com/item?id=1119186&quot;&gt;a really interesting
comment&lt;/a&gt; about the situation. I'm linking to the person he's responding to,
for context:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Pyre&lt;/em&gt;: Facebook can't improve their interface to make users not type
&quot;facebook login&quot; into Google as a way of accessing their site.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;patio11&lt;/em&gt;: That is a failure of the imagination. They certainly could --
whether it is worth doing or not is another question, but hey, that is what
God gave us A/B testing to figure out. &lt;/p&gt;

&lt;p&gt;&quot;Hey user, it looks like you came to us today from Google searching for
[Facebook login]. Did you know that there is a better way? Type
&lt;a href=&quot;http://facebook.com&quot;&gt;facebook.com&lt;/a&gt; into [blah blah blah]. Try it now and we'll give you 5 free
credits for [without loss of generality: FarmVille]!&quot; &lt;/p&gt;

&lt;p&gt;Great job! You should do that every time. If you do that to log into
Facebook the next five days you use the service, we'll award you a Facebook
Diploma and give you another 10 free credits for [without loss of generality:
FarmVille]!&quot; &lt;/p&gt;

&lt;p&gt;On the back end, you show the above prompts to N% of your users who you
detect coming to the login page from Google search results (this is trivial --
check the referer). You then compare any user metric you want for the &quot;Was
Shown Facebook Login Course&quot; population and &quot;Complete Facebook Login Course&quot;
population with the population at large. Kill the test if it hurts your
metrics, deploy it sitewide if it helps them. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How cool would that be? Now the game mechanics aren't being used just to
increase engagement, but to actually teach people how to use your site or
service. It's classical conditioning; reward people for doing the right thing,
and they'll keep doing the right thing.&lt;/p&gt;

&lt;h2&gt;Game mechanics are your MVP&lt;/h2&gt;

&lt;p&gt;So how's this stuff relevant to your startup? Well, I think this idea ties in
really well with the concept of a Minimum Viable Product. Here's the idea:
Build your MVP, and then build game mechanics in. Unlock new features based on
game mechanics. This gives you a few advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your new users only get the most basic experience, which is still useful. It's a simplified, streamlined experience.&lt;/li&gt;
&lt;li&gt;Users only get the new features added that are relevant to how they use the site itself.&lt;/li&gt;
&lt;li&gt;You can &quot;fake it till you make it&quot; by implementing the features that are most useful to your users. Is everyone getting Badge A and not Badge B? Implement Feature A Level 2 first!&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I think that this makes for a really strong experience, if done right.
Foursquare kind of does this already in a crude way with their Super User
features. But I think it could be taken to a whole new level.&lt;/p&gt;

&lt;p&gt;Think about this:  Facebook, where you can only friend people, update your
profile, and send messages at first. Soon you unlock the ability to use
applications. Then the ability to create pages and groups. The interface
slowly unfolds in front of you. What about Reddit, where posting comments is
all you can do at first? A hundred upvotes gives you the ability to downvote.
Ten comments lets you post stories. (Hacker News sort of does this already,
with a minimum karma before downvoting is enabled.)&lt;/p&gt;

&lt;p&gt;If you could pull it off, I think it'd make for a really compelling user
experience. It does bring one extra design skill that many people may not
have, though: balance. Game designers are used to this already, but your
potential &quot;Power Users&quot; might not like having to wait to get more advanced
features. Then again, this might also solve some issues, like spam. If you had
to have 100 positively moderated comments before posting a story on Digg, it'd
be much harder to just sign up for spam accounts to submit bogus stories.&lt;/p&gt;

&lt;p&gt;This idea can be taken in a lot of different directions. I'm sure I'm only
barely scratching the surface with this idea, but I think it'll go really far.
What do you think? Any interesting mechanics I've missed? Any really
interesting thoughts for how services can incorporate game mechanics? I've
decided to re-open comments, but if nobody uses them, I'll just shut them off
again. Let me know what you think.&lt;/p&gt;

&lt;p&gt;This post has been featured on the Startup Pittsburgh blog,
&lt;a href=&quot;http://startuppittsburgh.com/2010/04/create-a-more-compelling-experience-for-your-users-through-game-mechanics/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing a "su" feature with Authlogic</title>
   <link href="http://blog.steveklabnik.com/2010/03/05/writing-a-su-feature-with-authlogic.html"/>
   <updated>2010-03-05T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/03/05/writing-a-su-feature-with-authlogic</id>
   <content type="html">&lt;p&gt;Sometimes, when responding to a support request, it's nice to see what your
users see. At the same time, you don't want to ask your users for their
passwords, out of respect for their privacy. So what do you do?&lt;/p&gt;

&lt;p&gt;Well, *NIX systems have a program called su.  Here's what man su has to say:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;NAME
       su - run a shell with substitute user and group IDs&lt;/p&gt;

&lt;p&gt;SYNOPSIS
       su [OPTION]... [-] [USER [ARG]...]&lt;/p&gt;

&lt;p&gt;DESCRIPTION
       Change the effective user id and group id to that of USER.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;su can be thought of as &quot;substitute user&quot; or &quot;switch user.&quot; It's a command
system administrators use to assume the identity of one of their users, or a
way for someone with the root password on the system to switch to the root
account itself. So how can we incorporate this into a web application?&lt;/p&gt;

&lt;p&gt;Well, we want to first log ourselves out, and then log in as the user we're
su-ing to. That's it. The tricky part, however, comes in when we're logging
in: as we said before, we don't want to ask for their password. Luckily,
Authlogic provides a way to create our UserSession object directly from a User
object by just passing it to create.&lt;/p&gt;

&lt;p&gt;This lets us write a controller method to do this pretty easily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def su
  @user = User.find params[:id]
  current_user_session.destroy
  UserSession.create!(@user)
  flash[:notice] = &quot;You've been su-d to that user.&quot;
  redirect_to dashboard_path
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add in a route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map.admin_su &quot;/admin/su/:id&quot;, :controller =&amp;gt; &quot;admin&quot;, :action =&amp;gt; &quot;su&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to a view somewhere in your administrative tools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= link_to &quot;log in as this user&quot;, admin_su_path(@user) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we're good to go!&lt;/p&gt;

&lt;p&gt;One last thing about this, though: You don't want to let anyone who's not an
administrator do this, for obvious reasons. My administrative controllers
always include a block like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;access_control do
  allow :admin
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;acl9 makes this really easy, but it's really important.&lt;/p&gt;

&lt;p&gt;So there you have it. Easy as pie.&lt;/p&gt;

&lt;p&gt;EDIT: This post made the Rails subreddit, and &lt;a href=&quot;http://www.reddit.com/r/rails/comments/cb0da/writing_a_su_feature_with_authlogic/c0rf26w&quot;&gt;brettbender posted his code&lt;/a&gt;
to get you back to admin. Here it is:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I used this article to help build a su feature for a rails app I'm working
on. thought I would share the code to let you su / exit-su back to the
original user you were logged in as. You just need to add a link somewhere
persistent if your session contains an entry for :su_user that links to the
unsu action.&lt;/p&gt;

&lt;p&gt;Inside your admin controller, make sure you limit access to these actions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def su
  @user = User.find params[:id]

  # change these 3 lines to apply to your session representation
  session[:su_user] = self.current_user.id
  self.current_user = @user

  flash[:notice] = &quot;You've been logged in as #{@user.login}.&quot;
  redirect_to &quot;/&quot;
end

def unsu
  redirect_url = &quot;/&quot;
  if(session.has_key?(:su_user))
    self.current_user = User.find session[:su_user]
    session.delete :su_user
    flash[:notice] = &quot;You have exited your switch user session. You are
    redirect_url = &quot;/admin/users/&quot;
  else
    flash[:error] = &quot;Sorry, we couldn't find your original user.&quot;
  end

  redirect_to redirect_url
end
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Why bother creating?</title>
   <link href="http://blog.steveklabnik.com/2010/03/03/why-bother-creating.html"/>
   <updated>2010-03-03T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/03/03/why-bother-creating</id>
   <content type="html">&lt;p&gt;Kanye West posted something interesting about the nature of creativity today.
I'm going to make a copy of it here, because I find the presentation also
interesting. Here's &lt;a href=&quot;http://www.kanyewest.com/2010/03/02/creativity&quot;&gt;his post&lt;/a&gt;, for reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kanye.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I'm not the biggest Kanye fan. I go back and forth. But I think that this is
an interesting, personal look into the creative process of someone whose work
is at least widely known and recognized.&lt;/p&gt;

&lt;p&gt;Goood quotes from unlikely sources&lt;/p&gt;

&lt;p&gt;I agree with charlesju on &lt;a href=&quot;http://news.ycombinator.com/item?id=1163873&quot;&gt;Hacker News&lt;/a&gt;, I think this line is my favorite:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I never feel like I'm not the underdog. I never felt completely comfortable.
I'm tormented by the need to create.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I've basically felt that same itch for large parts of my life. Sometimes, I
haven't paid it much attention, but that need has been the source of some of
the more interesting things I've done. I talked a little bit about this in my
post last week about &lt;a href=&quot;http://blog.steveklabnik.com/appreciating-the-gift-of-creation&quot;&gt;the gift of creation&lt;/a&gt;. That post was more about
recognizing the surface signs of the creative itch than examining the
underlying motivations that drive the creative process.&lt;/p&gt;

&lt;p&gt;&quot;Why&quot; is the harder question, of course. It's something I've been thinking a
lot about lately. One of the fundamental tenets of capitalism is the
incentivisation of behaviors. Some jobs are paid more simply because we want
to encourage people to do them. Garbage collectors, for instance, get paid
pretty well for the relative level of difficulty their duties entail. Even
though it's an unskilled job, nobody wants to do it, so they make well over
minimum wage. Some of the socialist literature I've been examining lately
basically posits that monetary incentives aren't the only kind of incentives,
and that even if the monetary incentives no longer existed, people would still
do &quot;undesirable&quot; things. I'm not sure that I buy it on a wide scale, but when
I look at myself, this is absolutely true. Even when I didn't pay my rent via
code, I still coded. I wasn't as fulfilled as a person, but I managed to
exist, and still create. That's what caused that thought to tumble around in
my brain for the last month or two... why bother creating?&lt;/p&gt;

&lt;p&gt;Haters gonna hate&lt;/p&gt;

&lt;p&gt;It's really amazing that people still continue to create at all, when there's
so much criticism out there. &lt;a href=&quot;http://al3x.net/2010/03/02/hiatus.html&quot;&gt;Al3x&lt;/a&gt;, a Twitter engineer, is shutting down
his blog. For now. Part of his reason is related; he's writing for himself,
and he feels the responses of others take away more than they contribute:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Lately, I’ve found the cathartic returns from blog-format writing to be
diminishing. The ideas I’m trying to express never really get put to rest in
my head when I write, now. Instead, they spark whole conversations that I
never intended to start in the first place, conversations that leech precious
time and energy while contributing precious little back. Negative responses I
can slough off, but the sense that I’m not really crystalizing my unset
thoughts by writing here is what bothers me.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I sort of felt the same way when my blog got linked to by Reddit a few weeks
back; there was a lot of bullshit. And it's frustrating. My initial
motivations are similar to Al3x's; I find that writing helps me to fill out my
thoughts. I've been trying to make writing a habit, and it's been hard to find
both the time and topics that are fleshed out enough for me to finish them off
by writing about them. But pushing myself is part of the challenge, and I
expect to get better at it as time goes on. Hopefully, this means that in the
future, I'll be able to synthesize more fully thought-through opinions at a
faster rate than before. I'll also have examined my own thoughts, opinions,
and convictions more closely, and made sure that they're in line with what I
truly believe is right. What I'm trying to get at is this: creation is always
incredibly personal. An author puts some of himself into every work that he
makes. So criticism against a work is extremely easy to consider as an attack
against the author itself. So it's difficult to create and put stuff out
there, only to get it criticized by everyone is frustrating.&lt;/p&gt;

&lt;p&gt;And the verdict is...&lt;/p&gt;

&lt;p&gt;... I'm still not sure. This is a topic I'll continue to write about, as my
feelings become more clear. There has to be something more fundamental
involved here. I haven't found it yet, I just know that I can't sit around and
watch TV. I can't work a 'normal' job and toil away on some reporting system
that helps just a few people do their jobs a little bit better. I've gotta do
something more important than that, change the world, keep pushing.&lt;/p&gt;

&lt;p&gt;And I'll keep telling you about it. So that I can figure it out for myself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reddit drama: an interesting look at community values</title>
   <link href="http://blog.steveklabnik.com/2010/03/01/reddit-drama-an-interesting-look-at-community-values.html"/>
   <updated>2010-03-01T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2010/03/01/reddit-drama-an-interesting-look-at-community-values</id>
   <content type="html">&lt;p&gt;I bet social psychologists are having a field day with the Internet. I know
nothing about the field, so I don't know if there are thousands of papers
about it already written or not, but there should be. I can't image that we've
ever had a period in history when more communities are being formed; they're
also being formed out in the open.&lt;/p&gt;

&lt;p&gt;I've been involved in many different online communities over the years. I've
already written before about the seeming decline of Reddit's content... but
this past week, something really interesting has happened. Reddit has had two
major events occur that have caused it to be increasingly self-reflexive on
the values and norms that the community desires for itself. This is
particularly interesting because normally, cultural norms have to be observed,
not codified. But here, we're seeing completely open discussion about &quot;The
community says this is not okay.&quot; It's really interesting stuff.&lt;/p&gt;

&lt;h2&gt;Speed Issues&lt;/h2&gt;

&lt;p&gt;I won't comment on the technical details involved, but Reddit has gotten
significantly slower over the past few months. This is normal, as the
community is growing. But it's caused quite a bit of a stir lately. Many users
are seeing increased loading times, error messages, missing posts, and various
other problems.&lt;/p&gt;

&lt;p&gt;What's a user to do in this situation? Post about it. See the &lt;a href=&quot;http://www.reddit.com/search?q=fix+search&amp;amp;sort=hot&amp;amp;t=month&quot;&gt;posts about the
search feature&lt;/a&gt;, or posts about the slowdown.&lt;/p&gt;

&lt;p&gt;For example, as I look for the links to these posts, I get this:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Our search machines are under too much load to handle your request right
now. :( Sorry for the inconvenience.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Amusing. But unfortunate. The interesting part, though, is the backlash
against the complaints. See this thread, &quot;&lt;a href=&quot;http://www.reddit.com/r/reddit.com/comments/b7jnr/reddit_fix_your_fucking_users_they_are_unbearably/&quot;&gt;Reddit, fix your fucking users.
They are unbearably bitchy.&lt;/a&gt;&quot; (The cursing is emulating the posts made
complaining about Reddit's lack of speed.)&lt;/p&gt;

&lt;p&gt;There's a huge discussion about what it means to be part of a free online
community. There's a contingent of people who say that people aren't entitled
to complain, because Reddit is free. Another points out that complaining is
better than silently leaving the site, and that while people don't pay for
Reddit accounts, the eyeballs Reddit users provide enable the site to make
money.&lt;/p&gt;

&lt;p&gt;Some choice comments:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hey, my incredibly expensive Reddit subscription fees entitle me to 100%
perfect service! LEAVE ME ALONE!&lt;/p&gt;

&lt;p&gt;Man, I've been loving this particular strawman for over a decade now. Thanks
for breaking out the classics.&lt;/p&gt;

&lt;p&gt;The reality is that Reddit is a business. The owners get paid because the
users keep coming back to the site. Having users bitch and moan is not a
problem for the admins - this isn't their personal blog, they're not mopy
teenagers who are gonna cut themselves when they see how mean people are being
to them on the interwebs.&lt;/p&gt;

&lt;p&gt;The problem for the admins is when users stop visiting Reddit altogether
because of constant technical problems, or fishy administrative decisions
about deleting threads, or too many spammers, or etc. They would much rather
have us bitch about these things on the front page, create giant threads about
them that keep thousands of posters and tens of thousands of readers engaged
and on the site, and provide catharsis and a public forum to address the
issues.&lt;/p&gt;

&lt;p&gt;tl;dr: Reddit is a business, they'd rather have us complain than have us
leave.&lt;/p&gt;

&lt;p&gt;Meta-bitching about bitching time&lt;/p&gt;

&lt;p&gt;The OP posted a well thought out comment simply suggesting that Reddit's
users should be polite and respectful when addressing each other and the
people that make using this site possible, and 90% of the responses here just
prove his point. It seems like people are more concerned with gaining comment
karma by posting bad one-liners than actually participating in intelligent
conversation.&lt;/p&gt;

&lt;p&gt;Is anyone else absolutely done with the reddit user base? I mean... I was
told that reddit was this great intellectual news aggregator that through the
use of 'karma' was able to bad submissions off the front page.&lt;/p&gt;

&lt;p&gt;Over the past few months I've been here all that has been up on the front
page has been Glen Beck, Conan O'Brian, Tiger Woods, weekly &quot;Reddit is slow&quot;
posts and now this Saydrah BS.&lt;/p&gt;

&lt;p&gt;I'll say what I said when Conan O'Brian was on the front page for a week
longer then Haiti ever was: I DON'T CARE. The Reddit admins don't think
Saydrah has abused her power as a moderator. At the very least (I personally
don't think she is a spammer) go flame some of the other 1000000000000000
spammers on reddit FFS. This is boring uneducated dribble.&lt;/p&gt;

&lt;p&gt;KEEP THIS TRASH OFF THE FRONT PAGE.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And more. Interesting stuff, overall. There's still quite a few trash
comments, though.&lt;/p&gt;

&lt;h2&gt;The Saydrah Situation&lt;/h2&gt;

&lt;p&gt;The other event involves a user named Saydrah. She's been accused of promoting
links on Reddit for money, and abusing her moderator powers in conjunction
with those offenses. This has spawned a huge amount of discussion on if these
actions were inappropriate or not. Here's &lt;a href=&quot;http://www.reddit.com/r/reddit.com/comments/b7e25/today_i_learned_that_one_of_reddits_most_active/&quot;&gt;the first big thread&lt;/a&gt;. Then &lt;a href=&quot;http://www.reddit.com/r/IAmA/comments/b7hpb/re_the_alleged_conflict_of_interest_on_reddit/&quot;&gt;an
AMA with moderators about their opinions&lt;/a&gt;. Lastly, &lt;a href=&quot;http://www.reddit.com/r/IAmA/comments/b7tew/fine_here_saydrah_ama_it_couldnt_get_much_worse/&quot;&gt;Saydrah does an AMA&lt;/a&gt;
herself and explains her side of the story.&lt;/p&gt;

&lt;p&gt;I won't show you a bunch of comments, only one. And it echoes my opinion on
the matter:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Two things: Frankly, I don't care if people are paid to submit links...if
they're interesting, I upvote. If not, I ignore them.&lt;/p&gt;

&lt;p&gt;Second, I have lurked around AR and RA a fair amount, and consistently find
myself thinking, &quot;That's a helpful and well-reasoned response! Oh, it's
Saydrah again!&quot; Whatever else people may say, I feel that you at least do try
to contribute positively to this site.&lt;/p&gt;

&lt;p&gt;...I guess I don't have a question, so I'll just leave my un-asked-for
opinion here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There's a lot more, on both sides of the conflict. Regardless, people are
hashing it out.&lt;/p&gt;

&lt;h2&gt;Growth Hurts&lt;/h2&gt;

&lt;p&gt;There's a reason they're called &quot;growing pains.&quot; Change is always a painful
time in any organism's life, and even though there's a lot of drama, the
current Reddit staff can take pride that they've created something that's so
important to people that they feel the need to scream about it for hours. It's
unfortunate that their baby is being embroiled in a flamewar, but these things
happen.&lt;/p&gt;

&lt;p&gt;We'll see what the community ends up deciding is acceptable. I've managed to
not get involved in these particular conflicts, but it sure is interesting to
watch!&lt;/p&gt;

&lt;p&gt;Edit: Jen added some interesting links on my facebook feed:
&lt;a href=&quot;http://j.mp/baRqdy&quot;&gt;http://j.mp/baRqdy&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Hackety Mainfesto</title>
   <link href="http://blog.steveklabnik.com/2009/12/31/the-hackety-mainfesto.html"/>
   <updated>2009-12-31T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2009/12/31/the-hackety-mainfesto</id>
   <content type="html">&lt;p&gt;For those of you that don't know, I've taken over a project by someone named
_why. He dropped off of the face of the Internet back in March, and the
community has picked up his works. Because I'll be writing about the project
in the future, and because I feel these words are still relevant, I'm
reprinting the two of his essays that led up to the creation of the project,
Hackety Hack, here on my blog. Here's the second one.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

&lt;h1&gt;The Hackety Manifesto&lt;/h1&gt;

&lt;p&gt;Nearly four years ago, I wrote an essay called The Little Coder's Predicament.
It's not too unusual. Lots of others like it have been written. The point is:
programming just isn't available to people like it was with the Commodore 64.
I also outlined my requirements for a new cross-platform programming
environment for beginners.&lt;/p&gt;

&lt;p&gt;The essay was widely linked on Slashdot, Reddit, Lambda, etc. I got lots of
mail from people who both agreed and disagreed. Great. Nice. Good people all
of them! And yet, nothing has changed. Not really!&lt;/p&gt;

&lt;p&gt;I've been told of the Xbox development kit and possible programming of Wii
channels. The Playstation actually had a language. But none if it has met my
criteria for a proper coding platform.&lt;/p&gt;

&lt;h2&gt;An Aside: We Care, But Not Enough&lt;/h2&gt;

&lt;p&gt;So, why has nothing been done about this? Maybe our interpreters and IDEs
(ewww…) are good enough? Lots of people wrote in to say that HTML and
JavaScript are the new BASIC. NO!!! You can't be serious!!! So people have to
write two languages now, which are intertwined in an almost inexplicable and
unfathomable way? This doesn't do it.&lt;/p&gt;

&lt;p&gt;Hello world should be one line.&lt;/p&gt;

&lt;p&gt;In fact, downloading an MP3 should be one line!!&lt;/p&gt;

&lt;p&gt;We just don't care right now, do we? Programmers have a paid gig. So business
is happily slurping them up. Look at our books. Look at the programming sites.
Programming is tightly coupled to business. Often the first example is an
e-commerce site! Our books are like FIFTY DOLLARS!! For crying out loud.&lt;/p&gt;

&lt;p&gt;This diatribe isn't about business being bad. Of course you need to feed your
family and drive an Audi.&lt;/p&gt;

&lt;p&gt;This diatribe is about adding some balance to the world of programming. Okay,
so, let's take things into our own hands and bring hacking to the young folks.&lt;/p&gt;

&lt;h2&gt;The Bylaws of Hackety&lt;/h2&gt;

&lt;p&gt;Here are the rules by which Hackety Hack was established:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beginners should be greeted to Hackety Hack by a cartoon character. (For the sake of argument, let's call this character: Hacky Mouse.)&lt;/li&gt;
&lt;li&gt;Also, helpful sentences. Preferably short and with a period.&lt;/li&gt;
&lt;li&gt;Hackety Hack is fundamentally a browser and a programming language. For now, Gecko and Ruby.&lt;/li&gt;
&lt;li&gt;I'm only using Ruby because I know it. Hopefully, more languages can be added!&lt;/li&gt;
&lt;li&gt;Again, this isn't about Ruby, it's about simply offering a place for plainspeople to tinker with code.&lt;/li&gt;
&lt;li&gt;IDEs are a disaster. Newbs should see only one non-scary window free of tree controls and pinned windows and toolbars.&lt;/li&gt;
&lt;li&gt;As such, we want to stay away from project files and makefiles, the trappings of an IDE.&lt;/li&gt;
&lt;li&gt;Hackety Hack also adds simple libraries for common things.&lt;/li&gt;
&lt;li&gt;Common things are one-liners.&lt;/li&gt;
&lt;li&gt;Keep args and options to a minimum.&lt;/li&gt;
&lt;li&gt;In Ruby, blocks should be used to open up a method to more advanced possibilities.&lt;/li&gt;
&lt;li&gt;Help files are clean, short, simple. Lots of short examples. No frames.&lt;/li&gt;
&lt;li&gt;While all bug tickets are helpful and great, I just value tickets from beginners to a greater degree.&lt;/li&gt;
&lt;li&gt;Hackety Hack is free and will remain free henceforth.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beyond that… anything which makes life easy and fun for Hackety Hackers is
definitely encouraged, even demanded.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Little Coder's Predicament</title>
   <link href="http://blog.steveklabnik.com/2009/12/28/the-little-coder-s-predicament.html"/>
   <updated>2009-12-28T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2009/12/28/the-little-coder-s-predicament</id>
   <content type="html">&lt;p&gt;For those of you that don't know, I've taken over a project by someone named
_why. He dropped off of the face of the Internet back in March, and the
community has picked up his works. Because I'll be writing about the project
in the future, and because I feel these words are still relevant, I'm
reprinting the two of his essays that led up to the creation of the project,
Hackety Hack, here on my blog.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

&lt;h1&gt;The Little Coder's Predicament&lt;/h1&gt;

&lt;p&gt;Okay, then, children of the modern age (where we live in a world so tied
together with wires that Pangaea ain't goin' nowhere!), you tell me if this is
a predicament or not.&lt;/p&gt;

&lt;p&gt;In the 1980s, you could look up from your &lt;a href=&quot;http://www.lemon64.com/&quot;&gt;Commodore 64&lt;/a&gt;, hours after
purchasing it, with a glossy feeling of empowerment, achieved by the pattern
of notes spewing from the speaker grille in an endless loop. You were part of
the movement to help machines sing! You were a programmer! The &lt;a href=&quot;http://kl.net/atari/&quot;&gt;Atari 800&lt;/a&gt;
people had BASIC. They know what I'm talking about. And the &lt;a href=&quot;http://web.archive.org/web/20070612155724/www.guidry.org/ti994a/systempics/4asystem-2.jpg&quot;&gt;TI-994A&lt;/a&gt; guys
don't need to say a word, because the TI could &lt;a href=&quot;http://www.obsoletecomputermuseum.org/ti99/ti99_syn.jpg&quot;&gt;say it&lt;/a&gt; for them!&lt;/p&gt;

&lt;p&gt;The old machines don't compare to the desktops of today, or to the consoles of
today. But, sadly, current versions of Windows have no immediately accessible
programming languages. And what's a kid going to do with Visual Basic? Build a
modal dialog? Forget coding for XBox. Requires registration in the XBox
Developer Program. Otherwise, you gotta crack the sucker open. GameCube?
GameBoy? Playstation 2?&lt;/p&gt;

&lt;h2&gt;Coding Just Isn't Accessible&lt;/h2&gt;

&lt;p&gt;Yes, there are burgeoning &lt;a href=&quot;http://openxdk.sourceforge.net/&quot;&gt;free&lt;/a&gt; &lt;a href=&quot;http://gbdk.sourceforge.net/&quot;&gt;SDKs&lt;/a&gt; for many of these platforms. But
they are obscure and most children have no means of actually deploying or
executing the code on their own hardware! This is obvious to us all and likely
doesn't seem such a big deal. But ask yourself what might have happened had
you not had access to a programming language on an Atari 800 or a Commodore.
You tell me if this is a predicament.&lt;/p&gt;

&lt;p&gt;It turns out, most of the kids in my neighborhood are exposed to coding
through the &lt;a href=&quot;http://www.ticalc.org/&quot;&gt;TI calculator&lt;/a&gt;. A handful of &lt;a href=&quot;http://www.ticalc.org/programming/columns/&quot;&gt;languages&lt;/a&gt; are available on
the TI and its processor is interesting enough to evoke some curiousity. But
this hasn't spread to its PDA big brothers, where young people could have more
exposure to programming. And undoubtedly the utility of a language on the
Palm, Pocket PC and others would be useful to many.&lt;/p&gt;

&lt;p&gt;So what's the problem here? We have no shortage of new languages, but they
become increasingly distanced from the populace. Are the companies behind
these platforms weary of placing the power of a programming language in the
hands of users? Is there not a demand any longer? It's got to be some kind of
greed, power, money thing, right?&lt;/p&gt;

&lt;p&gt;Perhaps this is just another reason to push Linux and BSD on consumer systems.
Still, are scripting languages easily accessible to beginners on those
systems? OSX has made several scripting languages available (including Ruby
and Python), but most users are unaware of their presence.&lt;/p&gt;

&lt;p&gt;I should mention that Windows is equipped with its own scripting host for
developing in JScript and VBScript. But the use of the scripting host is (I
believe) under-documented and limited for beginners. Try doing something
useful in a script without using Server.CreateObject. Let's not let kids touch
the COM objects, please!&lt;/p&gt;

&lt;h2&gt;The Christmas List&lt;/h2&gt;

&lt;p&gt;I'm thinking a toy language for consoles and desktops alike could be
monumental. I'm ot saying it needs to be cross-platform. A language for
GameCube that took advantage of platform-specific features could be more
appealing to GameCube users than a language that used a reduced featureset,
but could execute on a handheld. Really, we live in a world where both choices
should be available.&lt;/p&gt;

&lt;p&gt;As for essential features:&lt;/p&gt;

&lt;h3&gt;1. Transportable code.&lt;/h3&gt;

&lt;p&gt;On my TI-994A, I could make a little, animated Optimus Prime from pixels.
Insert cassette. Record. Pass around to friends. Receive high fives from
friends. Put on wraparound shades. Thank you, TI! Thank you, Optimus Prime!&lt;/p&gt;

&lt;p&gt;A little language for the consoles could be wildly popular if combined with
the good ature of sharing code. This could be done by trading memory cards,
but would be more effective if code could be easily obtained and posted on the
Web. Learning would accelerate and collaborative development could take place.&lt;/p&gt;

&lt;p&gt;A suitable language should give coders access to I/O devices, to allow
experimentation with network devices and the ability to enhance one's
connectivity with others. For the consoles, games could provide hooks for user
mods. This has long proven a successful staple of the desktop gaming world.&lt;/p&gt;

&lt;h3&gt;2. Simplicity.&lt;/h3&gt;

&lt;p&gt;You've got to be able to write a single line of code and see a result. We need
some instant results to give absolute beginners confidence. Simple methods for
sending an e-mail, reading a web page, playing music. Demonstrable in a one-
liner.&lt;/p&gt;

&lt;p&gt;Admittedly, as our systems have grown complex, it is difficult to balance
simplicity and capability. Most users will be unimpressed by code that emits
beeps and bloops from a PlayStation 2. If Ruby were available on the PS2, then
I would hope that I could hear rich symphonic sounds from a wee bit of code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Orchestra.play( &quot;A:2&quot;, &quot;C:4&quot;, &quot;E:1&quot;, &quot;G:1&quot; )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Access to the graphic engine might require more complex code. But simple
drawing methods could be provided for beginners. Or images could be stored
alongside code and accessed programmatically.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ImageLibrary.load( &quot;GolfingOldMan&quot; ).drawAt( 12, 10 )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The trick would be to uncover what small applications might entice novices and
still provide the ability to write large applications that would drive
developers to master the language and not limit their growth.&lt;/p&gt;

&lt;h3&gt;3. Sensible environment.&lt;/h3&gt;

&lt;p&gt;Considering that many won't want to purchase a keyboard for their gaming unit,
let's make sure that a reasonable environment is provided for entry of text.
Controllers could be worked like the &lt;a href=&quot;http://www.handykey.com/&quot;&gt;Twiddler&lt;/a&gt;. Or code could be
transferred via IR, TCP/IP. (Dare I say cassette? :D)&lt;/p&gt;

&lt;h3&gt;4. Give it away!&lt;/h3&gt;

&lt;p&gt;It used to be that programming was practically an inalienable right for users.
Include a language with the system, situated in a friendly spot. Each of the
game consoles I've mentioned has launchers. (With the exception of Game Boy
and its successors.) Provide a development prompt from the launcher. From
desktop software, provide shortcuts for both the command prompt and a
development prompt.&lt;/p&gt;

&lt;p&gt;Remember, we're looking for a language that requires no system hacks. No
obscure links. No warranty violation. We've become so used to these techniques
that it seems to be an essential part of getting our way.&lt;/p&gt;

&lt;p&gt;And in many ways it is essential. Tinkering with hardware is learning.
Lobotomizing and renovating is meaningful, magical. On behalf of those who
prefer to code, I make these wishes. Not to take away jobs from the Phillips
screwdriver.&lt;/p&gt;

&lt;h2&gt;The Ultimatum&lt;/h2&gt;

&lt;p&gt;My challenge is to Sony, Nintendo, Microsoft, Apple, and to those who
manufacture and develop our interactive technology. Let us interact with these
machines more deeply. Provide us a channel for having a dialogue with the
entertainment boxes we nurture and care for. I swear to you, the relationship
between the public and your product will assuredly blossom. That box will
become more of a chest for our personal works.&lt;/p&gt;

&lt;p&gt;In addition, if your developers start putting out crap, then you have a whole
world of people to pick up the slack.&lt;/p&gt;

&lt;p&gt;My challenge is for you to bundle a useful programming language with your
product. Ruby, Squeak, REBOL, Python. Take your pick. It will be inexpensive
to add any of these languages to your systems. And people will seriously pray
to you. You know how geeks get when they pledge allegiance to something. But,
yes, Ruby is preferable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>About Crows</title>
   <link href="http://blog.steveklabnik.com/2009/12/02/about-crows.html"/>
   <updated>2009-12-02T00:00:00-05:00</updated>
   <id>http://blog.steveklabnik.com/2009/12/02/about-crows</id>
   <content type="html">&lt;p&gt;A short time ago, the G20 came right here to Pittsburgh. With an event of such
worldwide importance happening in our backyards, several people decided to
document it via social media. The Mattress Factory did a site called &quot;MyG20&quot;
and it did pretty well. Some smaller groups did their own thing. But IndyMedia
did one better: &lt;a href=&quot;http://indypgh.org/g20/&quot;&gt;http://indypgh.org/g20/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://thecaucus.blogs.nytimes.com/2009/09/24/getting-out-the-anti-globalization-message/&quot;&gt;New York Times&lt;/a&gt; called it &quot;One of the best all-purpose sites with
updates from the streets.&quot; It got quite a lot of attention and hits from all
over. And it was put together by a good friend of mine, &lt;a href=&quot;http://www.twitter.com/edfilo&quot;&gt;@edfilo&lt;/a&gt;. I helped
a teeny tiny bit, but he (with the help of LibSyn) really did an awesome job.&lt;/p&gt;

&lt;p&gt;So why should this matter to you? The G20 is old news by now.&lt;/p&gt;

&lt;p&gt;He's releasing the code for the site, making it available to anyone who wants
to cover events. It's called &quot;Crows,&quot; and it lives at &lt;a href=&quot;http://crowsne.st/&quot;&gt;http://crowsne.st/&lt;/a&gt;
. With Crows, you can quickly and easily build a site, pulling in content from
Flickr, Twitter, and elsewhere, and posting it all on a geotagged Google Map.&lt;/p&gt;

&lt;p&gt;It's still in its rough infancy, but after the awesome role that it played
during the G20, several other organizations had contacted IndyMedia about
getting access to the code, and so it's already gaining traction in the space.
It's undergoing rapid development, with new features being added quite fast.
Ed really wants to make this useful for people, and I'm going to be
contributing to the project in what little spare time I can as well. If you're
a coder too, you can &lt;a href=&quot;http://github.com/edfilo/crows&quot;&gt;fork crows on GitHub&lt;/a&gt; to contribute back to the
project.&lt;/p&gt;

&lt;p&gt;Check it out, and you can follow &lt;a href=&quot;http://twitter.com/crowsource&quot;&gt;@crowsource&lt;/a&gt; on Twitter for updates, too.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
